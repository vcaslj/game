fight_skills = {'Быстрая атака': {'Память тела': 0, 'Точные удары': 0, 'Вихрь': 0, 'Сковывающие удары': 0},
                'Мощная атака': {'Силовая тренировка': 0, 'Сокрушительные удары': 0, 'Разрыв': 0, 'Хлипкое оружие': 0},
                'Защита': {'Отражение стрел': 0, 'Легкость ног': 0, 'Контратака': 0, 'Смертельная точность': 0},
                'Работа с арбалетом': {'Молниеносные рефлексы': 0, 'Хладнокровие': 0, 'Знание анатомии': 0, 'Сковывающий выстрел': 0},
                'Боевой транс': {'Решительность': 0, 'Бессмертие': 0, 'Лезвие бритвы': 0, 'Река гнева': 0}}
signs_skills = {'Знак Аард': {'Дальнобойный Аард': 0, 'Сметающий Аард': 0, 'Мощь Аарда': 0, 'Шоковая волна': 0},
                'Знак Игни': {'Расплавленный доспех': 0, 'Огненный поток': 0, 'Мощь Игни': 0, 'Пироманьяк': 0},
                'Знак Ирден': {'Сила глифов': 0, 'Магическая ловушка': 0, 'Мощь Ирдена': 0, 'Заряженные глифы': 0},
                'Знак Квен': {'Взрывной щит': 0, 'Активный щит': 0, 'Мощь Квена': 0, 'Разряд Квена': 0},
                'Знак Аксий': {'Обман': 0, 'Марионетка': 0, 'Мощь Аксия': 0, 'Контроль': 0}}
alchemy_skills = {'Зельеварение': {'Повышенная сопротивляемость': 0, 'Освежающий напиток': 0, 'Отложенное восстановление': 0, 'Побочные эффекты': 0},
                'Приготовление масел': {'Отравленные клинки': 0, 'Ужас': 0, 'Закрепитель': 0, 'Охотничий инстинкт': 0},
                'Создание бомб': {'Верная рука': 0, 'Взрывное дело': 0, 'Эффективность': 0, 'Кластерные бомбы': 0},
                'Мутация': {'Приобретенная стойкость': 0, 'Мутация тканей': 0, 'Синергия': 0, 'Адаптация': 0},
                'Испытание травами': {'Ясность мысли': 0, 'Презрение к боли': 0, 'Быстрый метаболизм': 0, 'Убийственный кураж': 0}}

fight_skills_describe = {'Быстрая атака': {'Быстрая атака': ['Это ваше базовое умение. Оно всегда активно. Позволяет выполнить быструю атаку в ближнем бою одним из мечей.'],
                                            'Память тела': ['Умение на прирост урона от быстрой атаки.'],
                                            'Точные удары': ['Значительно увеличивает прирост урона быстрой атаки за счет более высокого шанса нанесения критического удара.'],
                                            'Вихрь': ['Позволяет пройтись по противникам разрушительным пируэтом. Полезно в бою против большого скопления монстров.'],
                                            'Сковывающие удары': ['Вызывает серьезное кровотечение при каждом ударе.']},
                'Мощная атака': {'Мощная атака': ['Это ваше базовое умение. Оно всегда активно. Позволяет выполнить мощную атаку в ближнем бою одним из мечей.'],
                                   'Силовая тренировка': ['Базовое умение на прирост урона от мощной атаки.'],
                                   'Сокрушительные удары': ['Значительно увеличивает прирост урона мощной атаки за счет более высокого шанса нанесения критического удара.'],
                                   'Разрыв': ['Сильный удар, который расходует адреналин'],
                                   'Хлипкое оружие': ['Снижает урон у ваших противников']},
                'Защита': {'Защита': ['Это ваше базовое умение. Оно всегда активно. Защитная техника Школы Волка'],
                                   'Отражение стрел': ['Отражает стрелы в противников'],
                                   'Легкость ног': ['Позволяет произвести контратаку(Контратака не тратит очки хода)'],
                                   'Контратака': ['При контратаке вы наносите до 200% процентов от обычного урона. Также уменьшает урон противника'],
                                   'Смертельная точность': ['Дает шанс мгновенно убить противника при наличие 2 и более кубиков адреналина']},
                'Работа с арбалетом': {'Работа с арбалетом': ['Это ваше базовое умение. Оно всегда активно. Позволяет использовать легкий ручной арбалет.'],
                                      'Молниеносные рефлексы': ['Стрельба из арбалета не тратит очки хода'],
                                      'Хладнокровие': ['Вы получаете адреналин за каждый болт, попавший в цель'],
                                      'Знание анатомии': ['Увеличивает шанс на критические удары на арбалет.'],
                                      'Сковывающий выстрел': ['Враг не может двигаться']},
                'Боевой транс': {'Боевой транс': ['Это ваше базовое умение. Оно всегда активно. Удары, нанесенные в бою, дают очки адреналина. Каждое очко адреналина увеличивает урон, наносимый вашим оружием, на 10%. Максимальный уровень 5'],
                                  'Решительность': ['Уменьшает потерю адреналина при получении удара.'],
                                  'Бессмертие': [' Восстанавливает нулевое здоровье за счет очков адреналина.'],
                                  'Лезвие бритвы': ['Дает одно очко адреналина сразу перед началом боя.'],
                                  'Река гнева': ['Позволяет восстановить энергию знаков за счет очков адреналина.']}
                }
signs_skills_describe = {'Знак Аард': {'Знак Аард': ['Это ваше базовое умение. Оно всегда активно. Направленный телекинетический удар, который выбивает врагов из равновесия, открывая их для удара.'],
                              'Дальнобойный Аард': ['Увеличивает радиус действия Знака Аард.'],
                              'Сметающий Аард': ['Увеличивает шанс повалить противника.'],
                              'Мощь Аарда': ['Увеличивает радиус действия, шанс повалить врага и урон Знака Аард.'],
                              'Шоковая волна': ['Аард наносит до 25 урона.']},
                'Знак Игни': {'Знак Игни': ['Это ваше базовое умение. Оно активно всегда. Направленный огненный шквал, наносящий урон противникам.'],
                              'Расплавленный доспех': ['Поджигает противника.'],
                              'Огненный поток': ['Сильная огненная волна. Сильно расходует энергию знаков'],
                              'Мощь Игни': ['Увеличивает продолжительность и урон Знака Игни'],
                              'Пироманьяк': ['Увеличивает продолжительность горения']},
                'Знак Ирден': {'Знак Ирден': ['Это ваше базовое умение. Оно всегда активно. Магическая ловушка, наносящайся урон оказавшихся в ней противников.'],
                               'Сила глифов': ['Увеличивает длительность Знака Ирден'],
                               'Магическая ловушка': ['Увеличивает радиус действия Знака Ирден'],
                               'Мощь Ирдена': ['Увеличивает длительность и радиус действия Знака Ирден'],
                               'Заряженные глифы': ['Увеличивает урон Знака Ирден']},
                'Знак Квен': {'Знак Квен': ['Это ваше базовое умение. Оно всегда активно. Является щитом.'],
                              'Взрывной щит': ['Когда противник сбивает Знак Квен, он получает кантузию'],
                              'Активный щит': ['Пока Знак Квен действует, ведьмак пасивно регенирирует здоровье'],
                              'Мощь Квена': ['Увеличивает длительность действия Знака Квен.'],
                              'Разряд Квена': ['Отражает полученный урон обратно в атакующего']},
                'Знак Аксий': {'Знак Аксий': ['Это ваше базовое умение. Оно всегда активно. Знак, который влияет на разум противника, ненадолго выводя врага из боя.'],
                               'Обман': ['Враг под действием Знака Аксий теряет возможность двигаться'],
                               'Марионетка': ['Жертва ненадолго превращается в союзника'],
                               'Мощь Аксия': ['Увеличивает длительность действия Аксия'],
                               'Контроль': ['Аксий может действовать на двух противников одновременно.']}}

alchemy_skills_describe = {'Зельеварение': {'Зельеварение': ['Это ваше базовое умение. Оно всегда активно. Позволяет варить и пить ведьмачьи зелья'],
                                            'Повышенная сопротивляемость': ['Уменьшает количество очков интоксицаии от выпитого зелья'],
                                            'Освежающий напиток': ['Выпитые зелья восстанавливают до четверти здоровья каждое.'],
                                            'Ускоренное восстановление': ['Порог интоксикации падает быстрее'],
                                            'Побочные эффекты': ['Активирует тоже самое зелье второй раз без штрафов к интоксикации.']},
                           'Приготовление масел': {'Приготовление масел': ['Это ваше базовое умение. Оно всегда активно. Позволяет наносить масло на клинок.'],
                                                   'Отравленные клинки': ['Отправляет жертву'],
                                                   'Ужас': ['Увеличивает силу масла'],
                                                   'Закрепитель': ['Масло не стрираются с клинка'],
                                                   'Охотничий инстинкт': ['Увеличивает урон до 5.5 раз при переинтоксикации']},
                           'Создание бомб': {'Создание бомб': ['Это ваше базовое умение. Оно всегда активно. Позволяет изготавливать бомбы, которые можно бросать во врагов.'],
                                             'Верная рука': ['При использовании бомбы снижает количество потраченных очков хода'],
                                             'Взрывное дело': ['Увеличивает урон от бомб'],
                                             'Эффективность': ['Увеличивает допустимое количество бомб в рюкзаке'],
                                             'Кластерные бомбы': ['Бомба взрывается несколько раз']},
                           'Мутация': {'Мутация': ['Позволяет извлекать мутагены из трупов могущественных монстров. Ведьмаки используют их, чтобы наделить свое тело новыми способностями.'],
                                       'Приобретенная стойкость': ['Значительно расширяет порог интоксикации.'],
                                       'Мутация тканей': ['Каждые 4 умения добавляют по 100 здоровья'],
                                       'Синергия': ['Каждые 4 умения увеличивают урон на 10'],
                                       'Адаптация': ['Переинтоксикация не отнимает здоровье, а восстонавливает.']},
                           'Испытание травами': {'Испытание травами': ['Это ваше базовое умение. Оно всегда активно. Мутации позволяют ведьмакам выдерживать уровень интоксикации, смертельный для обычного человека.'],
                                                 'Ясность мысли': ['Дает шанс увернуться от атаки противника'],
                                                 'Презрение к боли': ['Увеличивает количество здоровья паралелльно с уровенем интоксикации'],
                                                 'Быстрый метаболизм': ['Токсичность убывает в разы быстрее'],
                                                 'Убийственный кураж': ['После череды убийств дает 100% шанс на критический удар на несколько ходов']}}

silver_swords_down = {'lvl1':{'Серебрянный меч школы Волка': 5, 'Серебрянный меч школы Кота': 6, 'Серебрянный меч школы Грифона': 3.5,
                           'Серебрянный меч школы Медведя': 7, 'Серебрянный меч школы Змеи': 3, 'Серебрянный меч школы Феникса': 4},
                      'lvl2': {'Улучшенный серебрянный меч школы Волка': 7, 'Улучшенный серебрянный меч школы Кота': 9.5, 'Улучшенный серебрянный меч школы Грифона': 4.5,
                            'Улучшенный серебрянный меч школы Медведя': 10, 'Улучшенный серебрянный меч школы Змеи': 5, 'Улучшенный серебрянный меч школы Феникса': 5},
                      'lvl3': {'Отличный серебрянный меч школы Волка': 9, 'Отличный серебрянный меч школы Кота': 12, 'Отличный серебрянный меч школы Грифона': 6,
                                'Отличный серебрянный меч школы Медведя': 12, 'Отличный серебрянный меч школы Змеи': 6, 'Отличный серебрянный меч школы Феникса': 7},
                      'lvl4': {'Мастерский серебрянный меч школы Волка': 11, 'Мастерский серебрянный меч школы Кота': 15, 'Мастерский серебрянный меч школы Грифона': 8,
                                'Мастерский серебрянный меч школы Медведя': 15, 'Мастерский серебрянный меч школы Змеи': 9, 'Мастерский серебрянный меч школы Феникса': 9}}

steel_swords_down = {'lvl1':{'Стальной меч школы Волка': 5, 'Стальной меч школы Кота': 7, 'Стальной меч школы Грифона': 4.5,
                          'Стальной меч школы Медведя': 7, 'Стальной меч школы Змеи': 6, 'Стальной меч школы Феникса': 4.5},
                     'lvl2':{'Улучшенный стальной меч школы Волка': 7, 'Улучшенный стальной меч школы Кота': 10, 'Улучшенный стальной меч школы Грифона': 6.5,
                          'Улучшенный стальной меч школы Медведя': 10, 'Улучшенный стальной меч школы Змеи': 7, 'Улучшенный стальной меч школы Феникса': 7},
                     'lvl3':{'Отличный стальной меч школы Волка': 9, 'Отличный стальной меч школы Кота': 13, 'Отличный стальной меч школы Грифона': 8,
                          'Отличный стальной меч школы Медведя': 12, 'Отличный стальной меч школы Змеи': 8, 'Отличный стальной меч школы Феникса': 8},
                     'lvl4':{'Мастерский стальной меч школы Волка': 11, 'Мастерский стальной меч школы Кота': 17, 'Мастерский стальной меч школы Грифона': 9,
                          'Мастерский стальной меч школы Медведя': 15, 'Мастерский стальной меч школы Змеи': 12, 'Мастерский стальной меч школы Феникса': 9.5}}

gloves_down = {'lvl1':{'Перчатки школы Волка': 1, 'Перчатки школы Кота': 0.5, 'Перчатки школы Грифона': 1,
                    'Перчатки школы Медведя': 1, 'Перчатки школы Змеи': 1, 'Перчатки школы Феникса': 1},
               'lvl2':{'Улучшенные перчатки школы Волка': 1.5, 'Улучшенные перчатки школы Кота': 1, 'Улучшенные перчатки школы Грифона': 1.5,
                    'Улучшенные перчатки школы Медведя': 1.5, 'Улучшенные перчатки школы Змеи': 1.5, 'Улучшенные перчатки школы Феникса': 1.5},
               'lvl3':{'Отличные перчатки школы Волка': 5, 'Отличные перчатки школы Кота': 1.5, 'Отличные перчатки школы Грифона': 5,
                    'Отличные перчатки школы Медведя': 2, 'Отличные перчатки школы Змеи': 5, 'Отличные перчатки школы Феникса': 5},
               'lvl4':{'Мастерские перчатки школы Волка': 2.5, 'Мастерские перчатки школы Кота': 2, 'Мастерские перчатки школы Грифона': 2.5,
                    'Мастерские перчатки школы Медведя': 2.5, 'Мастерские перчатки школы Змеи': 2.5, 'Мастерские перчатки школы Феникса': 2.5}}

boots_down = {'lvl1':{'Сапоги школы Волка': 1, 'Сапоги школы Кота': 1, 'Сапоги школы Грифона': 1,
                   'Сапоги школы Медведя': 1, 'Сапоги школы Змеи': 1, 'Сапоги школы Феникса': 1},
              'lvl2':{'Улучшенные сапоги школы Волка': 1.5, 'Улучшенные сапоги школы Кота': 1.5, 'Улучшенные сапоги школы Грифона': 1.5,
                   'Улучшенные сапоги школы Медведя': 1.5, 'Улучшенные сапоги школы Змеи': 1.5, 'Улучшенные сапоги школы Феникса': 1.5},
              'lvl3':{'Отличные сапоги школы Волка': 2, 'Отличные сапоги школы Кота': 2, 'Отличные сапоги школы Грифона': 2,
                   'Отличные сапоги школы Медведя': 2, 'Отличные сапоги школы Змеи': 2, 'Отличные сапоги школы Феникса': 2},
              'lvl4':{'Мастерские сапоги школы Волка': 2.5, 'Мастерские сапоги школы Кота': 2.5, 'Мастерские сапоги школы Грифона': 2.5,
                   'Мастерские сапоги школы Медведя': 2.5, 'Мастерские сапоги школы Змеи': 2.5, 'Мастерские сапоги школы Феникса': 2.5}}

pants_down = {'lvl1': {'Штаны школы Волка': 3.5, 'Штаны школы Кота': 1.5, 'Штаны школы Грифона': 3.5,
                   'Штаны школы Медведя': 5, 'Штаны школы Змеи': 3.5, 'Штаны школы Феникса': 3.5},
              'lvl2': {'Улучшенные штаны школы Волка': 3.5, 'Улучшенные штаны школы Кота': 2, 'Улучшенные штаны школы Грифона': 3.5,
                   'Улучшенные штаны школы Медведя': 5, 'Улучшенные штаны школы Змеи': 3.5, 'Улучшенные штаны школы Феникса': 3.5},
              'lvl3': {'Отличные штаны школы Волка': 5, 'Отличные штаны школы Кота': 2.5, 'Отличные штаны школы Грифона': 5,
                   'Отличные штаны школы Медведя': 7.5, 'Отличные штаны школы Змеи': 5, 'Отличные штаны школы Феникса': 5},
              'lvl4': {'Мастерские штаны школы Волка': 5, 'Мастерские штаны школы Кота': 3, 'Мастерские штаны школы Грифона': 5,
                   'Мастерские штаны школы Медведя': 7.5, 'Мастерские штаны школы Змеи': 5, 'Мастерские штаны школы Феникса': 5}}

armor_down = {'lvl1': {'Доспех школы Волка': 7.5, 'Доспех школы Кота': 2.5, 'Доспех школы Грифона': 7.5,
                   'Доспех школы Медведя': 10, 'Доспех школы Змеи': 7.5, 'Доспех школы Феникса': 7.5},
              'lvl2': {'Улучшенный доспех школы Волка': 10, 'Улучшенный доспех школы Кота': 4, 'Улучшенный доспех школы Грифона': 10,
                   'Улучшенный доспех школы Медведя': 15, 'Улучшенный доспех школы Змеи': 10, 'Улучшенный доспех школы Феникса': 10},
              'lvl3': {'Отличный доспех школы Волка': 12.5, 'Отличный доспех школы Кота': 5.5, 'Отличный доспех школы Грифона': 12.5,
                   'Отличный доспех школы Медведя': 15, 'Отличный доспех школы Змеи': 12.5, 'Отличный доспех школы Феникса': 12.5},
              'lvl4': {'Мастерский доспех школы Волка': 15, 'Мастерский доспех школы Кота': 7.5, 'Мастерский доспех школы Грифона': 15,
                   'Мастерский доспех школы Медведя': 22.5, 'Мастерский доспех школы Змеи': 15, 'Мастерский доспех школы Феникса': 15}}


all = {'Волка': {'lvl1': ['Доспех школы Волка', 'Штаны школы Волка', 'Сапоги школы Волка', 'Перчатки школы Волка',
                         'Стальной меч школы Волка', 'Серебрянный меч школы Волка'],
                'lvl2': ['Улучшенный доспех школы Волка', 'Улучшенные штаны школы Волка', 'Улучшенные сапоги школы Волка', 'Улучшенные перчатки школы Волка',
                         'Улучшенный стальной меч школы Волка', 'Улучшенный серебрянный меч школы Волка'],
                'lvl3': ['Отличный доспех школы Волка', 'Отличные штаны школы Волка', 'Отличные сапоги школы Волка', 'Перчатки школы Волка',
                         'Отличный стальной меч школы Волка', 'Отличный серебрянный меч школы Волка'],
                'lvl4': ['Мастерский доспех школы Волка', 'Мастерские штаны школы Волка', 'Мастерские сапоги школы Волка', 'Мастерские перчатки школы Волка',
                         'Мастерский стальной меч школы Волка', 'Мастерский серебрянный меч школы Волка']},

       'Кота': {'lvl1': ['Доспех школы Кота', 'Штаны школы Кота', 'Сапоги школы Кота', 'Перчатки школы Кота',
                        'Стальной меч школы Кота', 'Серебрянный меч школы Кота'],
                'lvl2': ['Улучшенный доспех школы Кота', 'Улучшенные штаны школы Кота', 'Улучшенные сапоги школы Кота', 'Улучшенные перчатки школы Кота',
                         'Улучшенный стальной меч школы Кота', 'Улучшенный серебрянный меч школы Кота'],
                'lvl3': ['Отличный доспех школы Кота', 'Отличные штаны школы Кота', 'Отличные сапоги школы Кота', 'Отличные перчатки школы Кота',
                         'Отличный стальной меч школы Кота', 'Отличный серебрянный меч школы Кота'],
                'lvl4': ['Мастерский доспех школы Кота', 'Мастерские штаны школы Волка', 'Мастерские случшенные сапоги школы Кота', 'Мастерские перчатки школы Кота',
                         'Мастерский стальной меч школы Кота', 'Мастерский серебрянный меч школы Кота']},

       'Змеи': {'lvl1': ['Доспех школы Змеи', 'Штаны школы Змеи', 'Сапоги школы Змеи', 'Перчатки школы Змеи',
                         'Cтальной меч школы Змеи', 'Серебрянный меч школы Змеи'],
                'lvl2': ['Улучшенный доспех школы Змеи', 'Улучшенные штаны школы Змеи', 'Улучшенные сапоги школы Змеи', 'Улучшенные перчатки школы Змеи',
                         'Улучшенный стальной меч школы Змеи', 'Улучшенный серебрянный меч школы Змеи'],
                'lvl3': ['Отличный доспех школы Змеи', 'Отличные штаны школы Змеи', 'Отличные сапоги школы Змеи', 'Отличные перчатки школы Змеи',
                         'Отличный стальной меч школы Змеи', 'Отличный серебрянный меч школы Змеи'],
                'lvl4': ['Мастерский доспех школы Змеи', 'Мастерские штаны школы Змеи', 'Мастерские сапоги школы Змеи', 'Мастерские перчатки школы Змеи',
                         'Мастерский стальной меч школы Змеи', 'Мастерский серебрянный меч школы Змеи']},

       'Медведя': {'lvl1': ['Доспех школы Медведя', 'Штаны школы Медведя', 'Сапоги школы Медведя', 'Перчатки школы Медведя',
                            'Улучшенный стальной меч школы Медведя', 'Серебрянный меч школы Медведя'],
                'lvl2': ['Улучшенный доспех школы Медведя', 'Улучшенные штаны школы Медведя', 'Улучшенные сапоги школы Медведя', 'Улучшенные перчатки школы Медведя',
                         'Улучшенный стальной меч школы Медведя', 'Улучшенный серебрянный меч школы Медведя'],
                'lvl3': ['Отличный доспех школы Медведя', 'Отличные штаны школы Медведя', 'Отличные сапоги школы Медведя', 'Отличные перчатки школы Медведя',
                         'Отличный стальной меч школы Медведя', 'Отличный серебрянный меч школы Медведя'],
                'lvl4': ['Мастерский доспех школы Медведя', 'Мастерские штаны школы Медведя', 'Мастерские сапоги школы Медведя', 'Мастерские перчатки школы Медведя',
                         'Мастерский стальной меч школы Медведя', 'Мастерский серебрянный меч школы Медведя']},

       'Грифона': {'lvl1': ['Доспех школы Грифона', 'Штаны школы Грифона', 'Сапоги школы Грифона', 'Перчатки школы Грифона',
                           'Стальной меч школы Грифона', 'Серебрянный меч школы Грифона'],
                'lvl2': ['Улучшенный доспех школы Грифона', 'Улучшенные штаны школы Грифона', 'Улучшенные сапоги школы Грифона', 'Улучшенные перчатки школы Грифона',
                         'Улучшенный стальной меч школы Грифона', 'Улучшенный серебрянный меч школы Грифона'],
                'lvl3': ['Отличный доспех школы Грифона', 'Отличные штаны школы Грифона', 'Отличные сапоги школы Грифона', 'Отличные перчатки школы Грифона',
                         'Отличный стальной меч школы Грифона', 'Отличный серебрянный меч школы Грифона'],
                'lvl4': ['Мастерский доспех школы Грифона', 'Мастерские штаны школы Грифона', 'Мастерские сапоги школы Грифона', 'Мастерские перчатки школы Грифона',
                         'Мастерский стальной меч школы Грифона', 'Мастерский серебрянный меч школы Грифона']},

       'Феникса': {'lvl1': ['Доспех школы Феникса', 'Штаны школы Феникса', 'Сапоги школы Феникса', 'Перчатки школы Феникса',
                           'Стальной меч школы Феникса', 'Серебрянный меч школы Феникса'],
                'lvl2': ['Улучшенный доспех школы Феникса', 'Улучшенные штаны школы Феникса', 'Улучшенные сапоги школы Феникса', 'Улучшенные перчатки школы Феникса',
                         'Улучшенный стальной меч школы Феникса', 'Улучшенный серебрянный меч школы Феникса'],
                'lvl3': ['Отличный доспех школы Феникса', 'Отличные штаны школы Феникса', 'Отличные сапоги школы Феникса', 'Перчатки школы Феникса',
                         'Отличный стальной меч школы Феникса', 'Отличный серебрянный меч школы Феникса'],
                'lvl4': ['Мастерский доспех школы Феникса', 'Мастерские штаны школы Феникса', 'Мастерские сапоги школы Феникса', 'Мастерские перчатки школы Феникса',
                         'Мастерский стальной меч школы Феникса', 'Мастерский серебрянный меч школы Феникса']}}


potions = {'Ласточка':{'lvl1': {'Ласточка': 10},
                       'lvl2': {'Улучшенная Ласточка': 20},
                       'lvl3': {'Отличная Ласточка': 30}},
           'Гром':{'lvl1': {'Гром': 10},
                       'lvl2': {'Улучшенный Гром': 20},
                       'lvl3': {'Отличный Гром': 30}},
           'Зелье Петри':{'lvl1': {'Зелье Петри': 10},
                       'lvl2': {'Улучшенное Зелье Петри': 20},
                       'lvl3': {'Отличное Зелье Петри': 30}},
           'Лес Марибора':{'lvl1': {'Лес Марибора': 10},
                       'lvl2': {'Улучшенный Лес Марибора': 20},
                       'lvl3': {'Отличный Лес Марибора': 30}},
           'Неясыть':{'lvl1': {'Неясыть': 10},
                       'lvl2': {'Улучшенная Неясыть': 20},
                       'lvl3': {'Отличная Неясыть': 30}}}

potions_describe = {'Ласточка': 'Восстонавливает здоровье', 'Гром': 'Увеличивает урон',
                    'Петри': 'Увеличивает урон знаков', 'Лес Марибора': 'Ускоряет генерацию очков адреналина', 'Неясыть': 'Ускоряет восстановление энергии'}

bombs = {'Картечь':{'lvl1': {'Картечь': 10},
                    'lvl2': {'Улучшенная Картечь': 20},
                    'lvl3': {'Отличная Картечь': 30}},
         'Северный ветер': {'lvl1': {'Северный ветер': 10},
                            'lvl2': {'Улучшенный Северный ветер': 20},
                            'lvl3': {'Отличный Северный ветер': 30}},
         'Сон дракона': {'lvl1': {'Сон дракона': 10},
                         'lvl2': {'Улучшенный Сон дракона': 20},
                         'lvl3': {'Отличный Сон дракона': 30}}}
bombs_describe = {'Картечь': 'Наносит физический урон', 'Северный ветер': 'Замораживает противника на указанное число ходов', 'Сон дракона': 'Наносит урон огнем'}
oils = 5
price_list_tavern = {'Алкагест': 31, 'Белая чайка': 106, 'Краснолюдский спирт': 47}
price_list_lawn = {'Вербена': 6, 'Яд главоглаза': 30, 'Аренария': 5, 'Призрачная пыль': 20, 'Паутинник': 8, 'Эмбрион эндриаги': 45,
                   'Плод берберки': 5, 'Костный мозг альгуля': 30, 'Язык утопца': 30, 'Ласточкина трава': 3, 'Мозг утопца': 30}
price_list_trader = {'Селитра': 25, 'Фосфор': 15, 'Корень душистого перца': 5, 'Красный кристалл': 20, 'Белый кристалл': 20}
for_craft = {'Ласточка':{'lvl1': {'Краснолюдский спирт': 1, 'Мозг утопца': 1, 'Ласточкина трава': 5},
                       'lvl2': {'Краснолюдский спирт': 1, 'Мозг утопца': 2, 'Ласточкина трава': 6, 'Алкагест': 1},
                       'lvl3': {'Краснолюдский спирт': 1, 'Мозг утопца': 4, 'Ласточкина трава': 8, 'Белая чайка': 1}},
           'Гром':{'lvl1': {'Краснолюдский спирт': 1, 'Паутинник': 2, 'Эмбрион эндриаги': 1},
                       'lvl2': {'Краснолюдский спирт': 1, 'Паутинник': 3, 'Эмбрион эндриаги': 2, 'Алкагест': 1},
                       'lvl3': {'Краснолюдский спирт': 1, 'Паутинник': 4, 'Эмбрион эндриаги': 4, 'Белая чайка': 1}},
           'Зелье Петри':{'lvl1': {'Краснолюдский спирт': 1, 'Аренария': 5, 'Призрачная пыль': 1},
                       'lvl2': {'Краснолюдский спирт': 1, 'Вербена': 6, 'Яд главоглаза': 2, 'Алкагест': 1},
                       'lvl3': {'Краснолюдский спирт': 1, 'Вербена': 8, 'Яд главоглаза': 4, 'Белая чайка': 1}},
           'Лес Марибора':{'lvl1': {'Краснолюдский спирт': 1, 'Плод берберки': 3, 'Язык утопца': 2, 'Костный мозг альгуля': 1},
                       'lvl2': {'Краснолюдский спирт': 1, 'Плод берберки': 4, 'Язык утопца': 2, 'Костный мозг альгуля': 1, 'Алкагест': 1},
                       'lvl3': {'Краснолюдский спирт': 1, 'Плод берберки': 5, 'Язык утопца': 4, 'Костный мозг альгуля': 2, 'Белая чайка': 1}},
           'Неясыть':{'lvl1': {'Краснолюдский спирт': 1, 'Вербена': 2, 'Яд главоглаза': 1},
                       'lvl2': {'Краснолюдский спирт': 1, 'Вербена': 2, 'Яд главоглаза': 2, 'Алкагест': 1},
                       'lvl3': {'Краснолюдский спирт': 1, 'Вербена': 3, 'Яд главоглаза': 3, 'Белая чайка': 1}},
           'Картечь':{'lvl1': {'Селитра': 2, 'Белый кристалл': 2},
                    'lvl2': {'Селитра': 3, 'Белый кристалл': 4},
                    'lvl3': {'Селитра': 5, 'Белый кристалл': 5}},
           'Северный ветер': {'lvl1': {'Селитра': 5, 'Красный кристалл': 2, 'Корень душистого перца': 2},
                            'lvl2': {'Селитра': 6, 'Красный кристалл': 3, 'Корень душистого перца': 2},
                            'lvl3': {'Селитра': 7, 'Красный кристалл': 4, 'Корень душистого перца': 3}},
           'Сон дракона': {'lvl1': {'Селитра': 1, 'Фосфор': 2},
                         'lvl2': {'Селитра': 3, 'Фосфор': 3},
                         'lvl3': {'Селитра': 4, 'Фосфор': 5}}}
monsters_kolvo = {'Утопцы': 12, 'Волколак': 1, 'Призраки': 3, 'Накеры': 0, 'Леший': 1}
monsters_dmg = {'Утопец': 10, 'Волколак': 25, 'Призрак': 17, 'Накер': 13, 'Леший': 33}
monsters_hp = {'Утопец': [[70] for i in range(12)], 'Волколак': 400, 'Призрак': 140, 'Накер': 30, 'Леший': 500}
monsters_exp = {'Утопцы': 480, 'Волколак': 484, 'Призрак': 588, 'Накер': 8, 'Леший': 784}
emoji_monsters = {'Волколак': '\U0001F43A', 'Леший': '\U0001F332', 'Призраки': '\U0001F47B', 'Утопцы': '\U0001F6AB', 'Накеры': '\U0001F6AB'}


# функция создания карты
def create_map(x1, y1, coins):
    done1 = 'нет'
    map = [[' '] * 90 for _ in range(41)]             # создаем карту
    for r in range(41):                        # ширина (X)
        for c in range(90):                         # высота (Y)
            if (8 >= r >= 7) and (70 >= c >= 69):         # утопцы
                map[r][c] = '\U0001F6AB'
            if (13 >= r >= 12) and (45 >= c >= 44):         # волколак
                map[r][c] = '\U0001F43A'
            if (14 >= r >= 13) and (7 >= c >= 6):         # леший
                map[r][c] = '\U0001F332'
            if (33 >= r >= 32) and (6 >= c >= 5):         # накеры
                map[r][c] = '\U0001F6AB'
            if (33 == r) and (62 >= c >= 60):         # призрак
                map[r][c] = '\U0001F47B'

            if (17 >= r >= 15) and (75 >= c >= 74):        # по точкам в матрице заполняем карту          #   корчма
                map[r][c] = '\U0001F37B'
            if (22 >= r >= 21) and (68 >= c >= 66):                 #    кузня
                map[r][c] = '\U0001F6E0'
            if (r == 17) and (69 == c):                             #   доска
                map[r][c] = '\U0001F4C3'
            if (r == 20 and 68 >= c >= 48) or (68 == c and 19 >= r >= 14) or (73 == c and 17 >= r >= 14) or (r == 18 and c >= 68) or (r == 16 and 67 >= c >= 62) \
                    or (33 >= r >= 16 and c == 62) or (r == 21 and 49 >= c >= 27) or (r == 22 and 28 >= c >= 0) or (22 >= r >= 0 and 28 == c)\
                    or (16 >= r >= 13 and c == 61) or (14 >= r >= 0 and 60 == c) or (33 == r and 82 >= c >= 62):      # дорога
                map[r][c] = '='
            if (69 == c and 16 >= r >= 15) or (72 >= c >= 70 and 17 >= r >= 16) or (72 == c and 15 == r) or (64 >= c >= 63 and 18 >= r >= 17)\
                    or (67 >= c >= 66 and 19 >= r >= 17) or (70 >= c >= 69 and 20 >= r >= 19) or (73 >= c >= 72 and 19 == r) or (77 >= c >= 75 and 20 >= r >= 19)\
                    or (63 >= c >= 62 and 34 == r) or (64 >= c >= 63 and 32 >= r >= 30) or (61 >= c >= 60 and 32 >= r >= 31):     # дом
                map[r][c] = '\U0001F3E0'             # дом
            if (78 >= c >= 77 and r == 17):                             #   торговец
                map[r][c] = '\U0001F4B0'
            if (87 >= c >= 85 and 25 >= r >= 14) or (85 >= c >= 83 and 15 >= r >= 13) or (83 >= c >= 81 and 13 >= r >= 12) or (81 >= c >= 79 and 13 >= r >= 12)\
                    or (79 >= c >= 65 and 13 >= r >= 11) or (68 >= c >= 64 and 12 >= r >= 6) or (66 >= c >= 63 and 7 >= r >= 0) or (90 >= c >= 86 and 28 >= r >= 25):                   #   река
                map[r][c] = '\U0001F30A'                          #   река
            if (90 >= c >= 82 and r == 18) or (68 >= c >= 61 and r == 4):                             #   мост
                map[r][c] = '/'
            if (c == 29 and 16 >= r >= 15) or (82 >= c >= 81 and 32 == r):                             #   травник
                map[r][c] = '\U0001F33F'
            #if (54 >= c >= 43 and 13 == r) or (50 >= c >= 43 and 12 == r) or (52 >= c >= 46 and 11 == r):         #   гора
              #  map[r][c] = '#'
            #if  (23 >= c >= 19 and 4 >= r >= 3) or (39 >= c >= 35 and 36 >= r >= 35):         #   бандиты
             #   map[r][c] = '$' #'\U0001F5E1'
            #if  (23 >= c >= 19 and 4 >= r >= 3) or (39 >= c >= 35 and 36 >= r >= 35):         #   лес
              #  map[r][c] = '\U0001F333'
            if (int(x1) == r) and (c == int(y1)):                 #   перс
                map[r][c] = '\U0001F464'
            if (r == 40) and (90 >= c >= 0):                 #   граница
                map[r][c] = '-'
            if (79 >= int(y1) >= 62 and 22 >= int(x1) >= 14) and done1.lower() == 'нет':                             #   взаимодействие с объектами в деревне
                done1 = white_garden(done1)

            if (31 >= int(y1) >= 27 and 18 >= int(x1) >= 13) or (84 >= int(y1) >= 79 and 33 >= int(x1) >= 31):            #взаимодействие с травником
                print('Вы находитесь рядом с травником, хотите посмотреть его товары?')
                answer16 = input('>?').strip()
                while answer16.lower() != 'да' and answer16.lower() != 'нет':
                    print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                    answer16 = input('>?').strip()
                if answer16.lower() == 'да':
                    lawn(name, coins, simple_backpack, price_list_lawn)
                    print(f'У вас осталось {coins} монет')

                else:
                    break

            if (10 >= int(x1) >= 7) and (73 >= int(y1) >= 71):         # утопцы
                enemy = 'Утопцы'
                fight(enemy, monsters_dmg, monsters_hp, monsters_kolvo, name, hp_person, schools, potions, bombs, choose_skills_list, oils)
                exp(expa, monsters_kolvo, monsters_exp, lvl_person, points_skills)
                print('Вы можете прокачать умения, хотите?')
                answer39 = input('>?').strip()
                while answer39.lower() != 'да' and answer39.lower() != 'нет':
                    print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                    answer39 = input('>?').strip()
                if answer39.lower() == 'да':
                    change_skills(points_skills)
            if (14 >= int(x1) >= 11) and (46 >= int(y1) >= 43):     # волколак
                enemy = 'Волколак'
                fight(enemy, monsters_dmg, monsters_hp, monsters_kolvo, name, hp_person, schools, potions, bombs, choose_skills_list, oils)
                exp(expa, monsters_kolvo, monsters_exp, lvl_person, points_skills)
                print('Вы можете прокачать умения, хотите?')
                answer39 = input('>?').strip()
                while answer39.lower() != 'да' and answer39.lower() != 'нет':
                    print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                    answer39 = input('>?').strip()
                if answer39.lower() == 'да':
                    change_skills(points_skills)
            if (17 >= int(x1) >= 10) and (9 >= int(y1) >= 4):       # леший
                enemy = 'Леший'
                fight(enemy, monsters_dmg, monsters_hp, monsters_kolvo, name, hp_person, schools, potions, bombs, choose_skills_list, oils)
                exp(expa, monsters_kolvo, monsters_exp, lvl_person, points_skills)
                print('Вы можете прокачать умения, хотите?')
                answer39 = input('>?').strip()
                while answer39.lower() != 'да' and answer39.lower() != 'нет':
                    print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                    answer39 = input('>?').strip()
                if answer39.lower() == 'да':
                    change_skills(points_skills)
            if (34 >= int(x1) >= 31) and (7 >= int(y1) >= 4):       # накеры
                enemy = 'Накеры'
                fight(enemy, monsters_dmg, monsters_hp, monsters_kolvo, name, hp_person, schools, potions, bombs, choose_skills_list, oils)
                exp(expa, monsters_kolvo, monsters_exp, lvl_person, points_skills)
                print('Вы можете прокачать умения, хотите?')
                answer39 = input('>?').strip()
                while answer39.lower() != 'да' and answer39.lower() != 'нет':
                    print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                    answer39 = input('>?').strip()
                if answer39.lower() == 'да':
                    change_skills(points_skills)
            if (34 >= int(x1) >= 30) and (66 >= int(y1) >= 59):         #     призрак
                enemy = 'Призрак'
                fight(enemy, monsters_dmg, monsters_hp, monsters_kolvo, name, hp_person, schools, potions, bombs, choose_skills_list, oils)
                exp(expa, monsters_kolvo, monsters_exp, lvl_person, points_skills)
                print('Вы можете прокачать умения, хотите?')
                answer39 = input('>?').strip()
                while answer39.lower() != 'да' and answer39.lower() != 'нет':
                    print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                    answer39 = input('>?').strip()
                if answer39.lower() == 'да':
                    change_skills(points_skills)


      # возврат карты
    return map
# функция вывода(печати) карты
def print_map(map):
    for r in range(41):
        for c in range(90):
            print(map[r][c], end=' ')
        print()
# функция передвижения по карте
def movement_person(map):
    move = 'да'
    while move.lower() == 'да':
        print('Введите координату')
        x11, y11 = input('>?').strip().split(', ')
        while int(x11) not in range(1, 41) or int(y11) not in range(1, 90):
            print('Вы ввели некоректное число, попробуйте еще раз')
            x11, y11 = input('>?').strip().split(', ')
        while create_map(x11, y11, coins) == '\U0001F464' and create_map(x11, y11, coins) == ' ' and create_map(x11, y11, coins) == '=':
            print('Вы не можете находиться на этой точке, попробуйте ввести другое число')
            x11, y11 = input('>?').strip().split(', ')


        print_map(create_map(int(x11), int(y11), coins))

def white_garden(done):
    print('Вы находитесь на территории деревни "Белый сад"')
    print('В деревне есть Кузница, Корчма, Купец и Доска объявлений')
    print('Вы хотите куда-нибудь зайти?')
    answer25 = input('>?').strip()
    while answer25.lower() != 'да' and answer25.lower() != 'нет':
        print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
        answer25 = input('>?').strip()
    if answer25.lower() == 'да':
        print('Куда вы хотите зайти?')
        answer12 = input('>?').strip()
        while answer12 != 'Кузница' and answer12 != 'Корчма' and answer12 != 'Купец' and answer12 != 'Доска объявлений':
            print('Некоректный ввод, попробуйте еще раз')
            answer12 = input('>?').strip()
        con = 'да'
        while con.lower() == 'да':
            if answer12 == 'Кузница':
                forge(name, coins, set_person)
                print(f'У вас осталось {coins} монет')
            if answer12 == 'Корчма':
                tavern(coins, simple_backpack, price_list_tavern)
                print(f'У вас осталось {coins} монет')
            if answer12 == 'Купец':
                trader(name, coins, simple_backpack, price_list_trader)
                print(f'У вас осталось {coins} монет')
            if answer12 == 'Доска объявлений':
                accept_order = bulletin_board(order_list)

            print(
                'Хотите зайти еще куда-нибудь?')  # возможность повтора "функции", то есть пользователь может выбрать куда ему еще надо зайти
            answer25 = input('>?').strip()
            while answer25.lower() != 'да' and answer25.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer25 = input('>?').strip()
            if answer25.lower() == 'да':
                print('Куда вы хотите зайти?')
                print('В деревне есть Кузница, Корчма, Купец и Доска объявлений')
                answer12 = input('>?').strip()
                while answer12 != 'Кузница' and answer12 != 'Корчма' and answer12 != 'Купец' and answer12 != 'Доска объявлений':
                    print('Некоректный ввод, попробуйте еще раз')
                    answer12 = input('>?').strip()
            else:
                con = 'нет'
                done = 'да'
                break

    done = 'да'
    return done

# функция печати умений         удалена из кода
def print_skills(answer1):
    answer2 = 'да'
    while answer2.lower() == 'да':
        if answer1 == 'Фехтование':
            fight_skills_map = [[0] * 5 for _ in range(5)]
            r, c = 0, 0
            for k, v in fight_skills.items():
                fight_skills_map[r] = v
                print(k, fight_skills_map[r], end=' ')
                print()
                r += 1
            print('Хотите посмотреть описания умений?')
            answer10 = input('>?').strip()
            while answer10.lower() != 'да' and answer10.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer10 = input('>?').strip()
            if answer10.lower() == 'да':
                print_describe()
        if answer1 == 'Знаки':
            signs_skills_map = [[0] * 5 for _ in range(5)]
            r, c = 0, 0
            for k, v in signs_skills.items():
                signs_skills_map[r] = v
                print(k, signs_skills_map[r], end=' ')
                print()
                r += 1
            print('Хотите посмотреть описания умений?')
            answer10 = input('>?').strip()
            while answer10.lower() != 'да' and answer10.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer10 = input('>?').strip()
            if answer10.lower() == 'да':
                print_describe()
        if answer1 == 'Алхимия':
            alchemy_skills_map = [[0] * 5 for _ in range(5)]
            r, c = 0, 0
            for k, v in alchemy_skills.items():
                alchemy_skills_map[r] = v
                print(k, alchemy_skills_map[r], end=' ')
                print()
                r += 1
            print('Хотите посмотреть описания умений?')
            answer10 = input('>?').strip()
            while answer10.lower() != 'да' and answer10.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer10 = input('>?').strip()
            if answer10.lower() == 'да':
                print_describe()

        print('Хотите посмотреть другие ветки умений?')

        answer2 = input('>?').strip()
        while answer2.lower() != 'да' and answer2.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer2 = input('>?').strip()
        if answer2.lower() == 'да':
            print('Напишите какую ветку хотите посмотреть')
            print('Есть 3 ветки умений: Фехтование, Знаки(магия) и Алхимия')
            answer1 = input('>?').strip()
            while answer1.lower() != 'знаки' and answer1.lower() != 'фехтование' and answer1.lower() != 'алхимия':
                print('Некоректный ввод, попробуйте еще раз')
                answer1 = input('>?').strip()

    print('Хотите улучшить умения?')
    answer3 = input('>?').strip()
    while answer3.lower() != 'да' and answer3.lower() != 'нет':
        print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
        answer3 = input('>?').strip()
    if answer3.lower() == 'да':
        change_skills(points_skills)
    else:
        x1, y1 = 21, 28
        print_map(create_map(x1, y1))

# функция проверки на способность улучшить то или иное умение(градация умений)
def proverka(answer4, s_skills, answer5, points_skills):
    check, point1, free_list = False, 'да', []
    while point1.lower() == 'да':
        for k, v in s_skills[answer5].items():
            if k == 'Сила глифов' or k == 'Дальнобольный Аард' or k == 'Расплавленный доспех' or k == 'Взрывной щит' or k == 'Память тела' or k == 'Силовая тренировка' \
                or k == 'Отражение стрел' or k == 'Молниеносные рефлексы' or k == 'Решительность' or k == 'Обман' or k == 'Верная рука' or k == 'Ясность мысли' \
                    or k == 'Приобретенная стойкость' or k == 'Отравленные клинки' or k == 'Повышенная сопротивляемость' and v < 5:
                check = True
                free_list.append(k)
            if 5 > v >= 2 or check == True:
                free_list.append(k)
                if 5 > v >= 2:
                    check == True
                else:
                    check == False
                    point1 = 'нет'
                    break
    return free_list

# функция самой прокачки умения, задействует функцию proverka для проверки возможности прокачать навык(гградация)
def change_skills(points_skills):
    answer2 = 'да'
    print('Выберите ветку')
    print('Есть 3 ветки умений: Фехтование, Знаки(магия) и Алхимия')
    answer4 = input('>?').strip()
    while answer4 != 'Знаки' and answer4 != 'Фехтование' and answer4 != 'Алхимия':
        print('Некоректный ввод, попробуйте еще раз')
        answer4 = input('>?').strip()
    while answer2.lower() == 'да':
        if answer4 == 'Фехтование':
            print('Хотите посмотреть описания умений?')
            answer10 = input('>?').strip()
            while answer10.lower() != 'да' and answer10.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer10 = input('>?').strip()
            if answer10.lower() == 'да':
                print_describe()

            print('Выберите нужный навык:')
            for k, v in fight_skills.items():
                print(k)
            answer5 = input('>?').strip()
            while answer5 != 'Быстрая атака' and answer5 != 'Мощная атака' and answer5 != 'Защита' and answer5 != 'Работа с арбалетом' \
                    and answer5 != 'Боевой транс':
                print('Некоректный ввод, попробуйте еще раз')
                answer5 = input('>?').strip()
            print('Умения, которые вы можете прокачать:')
            list = proverka(answer4, fight_skills, answer5, points_skills)
            for k, v in fight_skills[answer5].items():
                if k in list:
                    print(f'{k} - уровень умения {v}')
            print('Выберите нужное умение и сколько очков вы хотите потратить(Пример: Память тела, 3)')
            answer6 = input('>?').strip().split(', ')
            while len(answer6) != 2:
                print('Некоректный ввод, попробуйте снова')
                answer6 = input('>?').strip().split(', ')
            keys = []
            for k, v in fight_skills[answer5].items():
                keys.append(k)
            while (answer6[0] not in keys) or (int(answer6[1]) not in range(1, 6)):
                print('Некоректный ввод, попробуйте снова')
                answer6 = input('>?').strip().split(', ')
            points_skills -= int(answer6[1])
            fight_skills[answer5][answer6[0]] += int(answer6[1])


            #print(fight_skills[answer5])
        if answer4 == 'Знаки':
            print('Хотите посмотреть описания умений?')
            answer10 = input('>?').strip()
            while answer10.lower() != 'да' and answer10.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer10 = input('>?').strip()
            if answer10.lower() == 'да':
                print_describe()

            print('Выберите нужный навык:')
            for k, v in signs_skills.items():
                print(k)
            answer5 = input('>?').strip()
            while answer5 != 'Знак Аард' and answer5 != 'Знак Игни' and answer5 != 'Знак Квен' \
                    and answer5 != 'Знак Ирден' and answer5 != 'Знак Аксий':
                print('Некоректный ввод, попробуйте еще раз')
                answer5 = input('>?').strip()
            print('Умения, которые вы можете прокачать:')
            list = proverka(answer4, signs_skills, answer5, points_skills)
            for k, v in signs_skills[answer5].items():
                if k in list:
                    print(f'{k} - уровень умения {v}')
            print('Выберите нужное умение и сколько очков вы хотите потратить(Пример: Память тела, 3)')
            answer6 = input('>?').strip().split(', ')
            while len(answer6) != 2:
                print('Некоректный ввод, попробуйте снова')
                answer6 = input('>?').strip().split(', ')
            keys = []
            for k, v in signs_skills[answer5].items():
                keys.append(k)
            while (answer6[0] not in keys) or (int(answer6[1]) not in range(1, 6)):
                print('Некоректный ввод, попробуйте снова')
                answer6 = input('>?').strip().split(', ')
            points_skills -= int(answer6[1])
            signs_skills[answer5][answer6[0]] += int(answer6[1])
            #print(signs_skills[answer5])
        if answer4 == 'Алхимия':
            print('Хотите посмотреть описания умений?')
            answer10 = input('>?').strip()
            while answer10.lower() != 'да' and answer10.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer10 = input('>?').strip()
            if answer10.lower() == 'да':
                print_describe()

            print('Выберите нужный навык:')
            for k, v in alchemy_skills.items():
                print(k)
            answer5 = input('>?').strip()
            while answer5 != 'Зельеварение' and answer5 != 'Приготовление масел' and answer5 != 'Создание бомб' \
                    and answer5 != 'Мутация' and answer5 != 'Испытание травами':
                print('Некоректный ввод, попробуйте еще раз')
                answer5 = input('>?').strip()
            print('Умения, которые вы можете прокачать:')
            list = proverka(answer4, alchemy_skills, answer5, points_skills)
            for k, v in alchemy_skills[answer5].items():
                if k in list:
                    print(f'{k} - уровень умения {v}')
            print('Выберите нужное умение и сколько очков вы хотите потратить(Пример: Память тела, 3)')
            answer6 = input('>?').strip().split(', ')
            while len(answer6) != 2:
                print('Некоректный ввод, попробуйте снова')
                answer6 = input('>?').strip().split(', ')
            keys = []
            for k, v in alchemy_skills[answer5].items():
                keys.append(k)
            while (answer6[0] not in keys) or (int(answer6[1]) not in range(1, 6)):
                print('Некоректный ввод, попробуйте снова')
                answer6 = input('>?').strip().split(', ')
            points_skills -= int(answer6[1])
            alchemy_skills[answer5][answer6[0]] += int(answer6[1])
            #print(alchemy_skills[answer5])
        # возможный повторный запуск данной функции
        print('Хотите улучшить умения в других ветках?')
        answer2 = input('>?').strip()
        while answer2.lower() != 'да' and answer2.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer2 = input('>?').strip()
        if answer2.lower() == 'да':
            print('Напишите нужную ветку')
            print('Есть 3 ветки умений: Фехтование, Знаки(магия) и Алхимия')
            answer4 = input('>?').strip()
            while answer4 != 'Знаки' and answer4 != 'Фехтование' and answer4 != 'Алхимия':
                print('Некоректный ввод, попробуйте еще раз')
                answer4 = input('>?').strip()
        else:
            print('После того, как вы прокачали умение, нужно вставить его в свое древо умений')
            choose_skills(choose_skills_list)
            return fight_skills, signs_skills, alchemy_skills

# функция описания умений
def print_describe():
    answer2 = 'да'
    print('Выберите ветку')
    print('Есть 3 ветки умений: Фехтование, Знаки и Алхимия')
    answer8 = input('>?').strip()
    while answer8 != 'Знаки' and answer8 != 'Фехтование' and answer8 != 'Алхимия':
        print('Некоректный ввод, попробуйте еще раз')
        answer8 = input('>?').strip()
    while answer2.lower() == 'да':
        if answer8 == 'Фехтование':
            print('Выберите нужный навык')
            for k, v in fight_skills.items():
                print(k)
            answer9 = input('>?').strip()
            while answer9 != 'Быстрая атака' and answer9 != 'Мощная атака' and answer9 != 'Защита' and answer9 != 'Работа с арбалетом' and answer9 != 'Боевой транс':
                print('Некоректный ввод, попробуйте еще раз')
                answer9 = input('>?').strip()
            for k, v in fight_skills_describe[answer9].items():
                print(f'{k} - {"".join(v)}')
        if answer8 == 'Знаки':
            print('Выберите нужный навык')
            for k, v in signs_skills.items():
                print(k)
            answer9 = input('>?').strip()
            while answer9 != 'Знак Ирден' and answer9 != 'Знак Квен' and answer9 != 'Знак Аксий' and answer9 != 'Знак Игни' and answer9 != 'Знак Аард':
                print('Некоректный ввод, попробуйте еще раз')
                answer9 = input('>?').strip()
            for k, v in signs_skills_describe[answer9].items():
                print(k, v)
        if answer8 == 'Алхимия':
            print('Выберите нужный навык')
            for k, v in alchemy_skills.items():
                print(k)
            answer9 = input('>?').strip()
            while answer9 != 'Мутация' and answer9 != 'Создание бомб' and answer9 != 'Зельеварение' and answer9 != 'Испытание травами' and answer9 != 'Приготовление масел':
                print('Некоректный ввод, попробуйте еще раз')
                answer9 = input('>?').strip()
            for k, v in alchemy_skills_describe[answer9].items():
                print(k, v)

        # возможный повторный запуск данной функции
        print('Хотите посмотреть описания умения в других ветках?')
        answer2 = input('>?').strip()
        while answer2.lower() != 'да' and answer2.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer2 = input('>?').strip()
        if answer2.lower() == 'да':
            print('Напишите нужную ветку')
            print('Есть 3 ветки умений: Фехтование, Знаки и Алхимия')
            answer2 = input('>?').strip()
            while answer2 != 'Знаки' and answer2 != 'Фехтование' and answer2 != 'Алхимия':
                print('Некоректный ввод, попробуйте еще раз')
                answer2 = input('>?').strip()
# функция описания школ и выбор их
def describe_schools():
    print('Вывести описание школ?')
    answer11 = input('>?').strip()
    while answer11.lower() != 'да' and answer11.lower() != 'нет':
        print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
        answer11 = input('>?').strip()
    if answer11.lower() == 'да':
        print('Школа Волка специализируется на использовании бомб. Мощь всех бомб увеличена на 20% при полном комплекте мастерского уровня брони')
        print('Школа Грифона специализируется на использование знаков. Мощь всех знаков увеличена на 20% при полном комплекте мастерского уровня брони')
        print('Школа Кота специализируется на сильных ударах меча. Урон от мечей увеличен на 20% при полном комплекте мастерского уровня брони')
        print('Школа Змеи специализируется на ядовитых и кровоточивших ударах меча. Урон от ранений на противнике увеличен на 30% при полном комплекте мастерского уровня брони')
        print('Школа Медведя славится своей бронй. Урон полученный от противников уменьшен на 20% при полном комплекте мастерского уровня брони')
        print('Школа Феникса специализируется на использование зелий. Порог интоксикации увеличен на 80 при полном комплекте мастерского уровня брони')

        print('Школы Волка, Змеи, Феникса и Грифона имеют среднюю броню, Школа Медведя - тяжелую, а Школа Кота - легкую')

    print('Какую школу вы выбираете?(Написать в винительном падеже)')
    answer_school = input('>?').strip()
    while answer_school != 'Волка' and answer_school != 'Грифона' and answer_school != 'Кота' and answer_school != 'Медведя' and answer_school != 'Феникса' and answer_school != 'Змеи':
        print('Некоректный ввод, попробуйте еще раз')
        answer_school = input('>?').strip()
    set_person['Школа'] = answer_school
    set_person['Доспех'] = all[answer_school]['lvl1'][0]
    set_person['Штаны'] = all[answer_school]['lvl1'][1]
    set_person['Сапоги'] = all[answer_school]['lvl1'][2]
    set_person['Перчатки'] = all[answer_school]['lvl1'][3]
    set_person['Стальной меч'] = all[answer_school]['lvl1'][4]
    set_person['Серебрянный меч'] = all[answer_school]['lvl1'][5]
    return set_person
# функция выбор умений
def choose_skills(choose_skills_list):
    print('Выберите ветку, умения которой хотите добавить к себе в прокачку')
    print('Есть 3 ветки умений: Фехтование, Знаки и Алхимия')
    answer11 = input('>?').strip()
    answer2 = 'да'
    while answer11 != 'Знаки' and answer11 != 'Фехтование' and answer11 != 'Алхимия':
        print('Некоректный ввод, попробуйте еще раз')
        answer11 = input('>?').strip()
    while answer2.lower() == 'да':
        if answer11 == 'Фехтование':
            print('Выберите навык')
            for k, v in fight_skills.items():
                print(k)
            answer12 = input('>?').strip()
            while answer12 != 'Быстрая атака' and answer12 != 'Мощная атака' and answer12 != 'Защита' and answer12 != 'Работа с арбалетом' and answer12 != 'Боевой транс':
                print('Некоректный ввод, попробуйте еще раз')
                answer12 = input('>?').strip()
            print('Выберите умение')
            keys = []
            for k, v in fight_skills[answer12].items():
                if v >= 1:
                    print(f'{k} - уровень умения {v}')
                    keys.append(k)
                if len(keys) == 0:
                    print('Вы не можете выбрать умения этого навыка, потому что они все не прокачена, напишите другой навык')
                    answer12 = input('>?').strip()
                    while answer12 != 'Быстрая атака' and answer12 != 'Мощная атака' and answer12 != 'Защита' and answer12 != 'Работа с арбалетом' and answer12 != 'Боевой транс':
                        print('Некоректный ввод, попробуйте еще раз')
                        answer12 = input('>?').strip()

            answer13 = input('>?').strip()
            while answer13 not in keys or answer13 in choose_skills_list:
                print('Вы не можете выбрать это умение, выберите другое')
                answer13 = input('>?').strip()
            choose_skills_list.append(answer13)
        if answer11 == 'Знаки':
            print('Выберите навык')
            for k, v in signs_skills.items():
                print(k)
            answer12 = input('>?').strip()
            while answer12 != 'Знак Квен' and answer12 != 'Знак Ирден' and answer12 != 'Знак Аард' and answer12 != 'Знак Игни' and answer12 != 'Знак Аксий':
                print('Некоректный ввод, попробуйте еще раз')
                answer12 = input('>?').strip()
            print('Выберите умение')
            keys = []
            for k, v in signs_skills[answer12].items():
                if v >= 1:
                    print(f'{k} - уровень умения {v}')
                    keys.append(k)
            answer13 = input('>?').strip()
            while answer13 not in keys or answer13 in choose_skills_list:
                print('Вы не можете выбрать это умение, выберите другое')
                answer13 = input('>?').strip()
            choose_skills_list.append(answer13)
        if answer11 == 'Алхимия':
            print('Выберите навык')
            for k, v in alchemy_skills.items():
                print(k)
            answer12 = input('>?').strip()
            while answer12 != 'Зельеварение' and answer12 != 'Создание бомб' and answer12 != 'Испытание травами' \
                    and answer12 != 'Приготовление масел' and answer12 != 'Мутация':
                print('Некоректный ввод, попробуйте еще раз')
                answer12 = input('>?').strip()
            print('Выберите умение')
            keys = []
            for k, v in alchemy_skills[answer12].items():
                if v >= 1:
                    print(f'{k} - уровень умения {v}')
                    keys.append(k)
            answer13 = input('>?').strip()
            while answer13 not in keys or answer13 in choose_skills_list:
                print('Вы не можете выбрать это умение, выберите другое')
                answer13 = input('>?').strip()
            choose_skills_list.append(answer13)
        # возможный повторный запуск данной функции
        print('Хотите поставить умения другой ветки?')
        answer2 = input('>?').strip()
        while answer2.lower() != 'да' and answer2.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer2 = input('>?').strip()
        if answer2.lower() == 'да':
            print('Напишите нужную ветку')
            print('Есть 3 ветки умений: Фехтование, Знаки и Алхимия')
            answer4 = input('>?').strip()
            while answer4 != 'Знаки' and answer4 != 'Фехтование' and answer4 != 'Алхимия':
                print('Некоректный ввод, попробуйте еще раз')
                answer4 = input('>?').strip()
        else:
            return choose_skills_list

# функция кузницы
def forge(name, coins, set_person):
    print(f'Привет, {name.title()}')
    print('Что надо выковать? Комплекты всех школ одного уровня стоят одинаково(Пример ввода: Кота, lvl4)')
    answer13 = input('>?').strip().split(', ')
    while len(answer13) != 2:
        print('Некоректный ввод, попробуйте снова')
        answer13 = input('>?').strip().split(', ')
    while (answer13[0] != 'Волка' and answer13[0] != 'Грифона' and answer13[0] != 'Кота' and answer13[0] != 'Медведя' and answer13[0] != 'Феникса' \
            and answer13[0] != 'Змеи') or (answer13[1] != 'lvl1' and answer13[1] != 'lvl2' and answer13[1] != 'lvl3' and answer13[1] != 'lvl4'):
        print('Некоректный ввод, попробуйте еще раз')
        answer13 = input('>?').strip().split(', ')
    con2 = 'да'
    while con2.lower() == 'да':
        if answer13[1] == 'lvl1':
            if coins < 200:
                print('У тебя не хватате денег, чтобы купить у меня этот комплект')
                con2 = 'нет'
            print('Я создам полный комплект брони и мечей за 200 монет')
            print('Будешь покупать?')
            answer14 = input('>?').strip()
            while answer14.lower() != 'да' and answer14.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer14 = input('>?').strip()
            if answer14.lower() == 'да':
                coins -= 200
                set_person['Доспех'] = all[answer13[0]][answer13[1]][0]
                set_person['Штаны'] = all[answer13[0]][answer13[1]][1]
                set_person['Сапоги'] = all[answer13[0]][answer13[1]][2]
                set_person['Перчатки'] = all[answer13[0]][answer13[1]][3]
                set_person['Стальной меч'] = all[answer13[0]][answer13[1]][4]
                set_person['Серебрянный меч'] = all[answer13[0]][answer13[1]][5]
                for i in range(6):
                    forge_backpack.append(all[answer13[0]][answer13[1]][i])
        if answer13[1] == 'lvl2':
            if coins < 500:
                print('У тебя не хватате денег, чтобы купить у меня этот комплект')
                con2 = 'нет'
            print('Я создам полный комплект брони и мечей за 500 монет')
            print('Будешь покупать?')
            answer14 = input('>?').strip()
            while answer14.lower() != 'да' and answer14.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer14 = input('>?').strip()
            if answer14.lower() == 'да':
                coins -= 500
                set_person['lvl'] = answer13[1]
                set_person['Доспех'] = all[answer13[0]][answer13[1]][0]
                set_person['Штаны'] = all[answer13[0]][answer13[1]][1]
                set_person['Сапоги'] = all[answer13[0]][answer13[1]][2]
                set_person['Перчатки'] = all[answer13[0]][answer13[1]][3]
                set_person['Стальной меч'] = all[answer13[0]][answer13[1]][4]
                set_person['Серебрянный меч'] = all[answer13[0]][answer13[1]][5]
                for i in range(6):
                    forge_backpack.append(all[answer13[0]][answer13[1]][i])
        if answer13[1] == 'lvl3':
            if coins < 900:
                print('У тебя не хватате денег, чтобы купить у меня этот комплект')
                con2 = 'нет'
            print('Я создам полный комплект брони и мечей за 900 монет')
            print('Будешь покупать?')
            answer14 = input('>?').strip()
            while answer14.lower() != 'да' and answer14.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer14 = input('>?').strip()
            if answer14.lower() == 'да':
                coins -= 900
                set_person['lvl'] = answer13[1]
                set_person['Доспех'] = all[answer13[0]][answer13[1]][0]
                set_person['Штаны'] = all[answer13[0]][answer13[1]][1]
                set_person['Сапоги'] = all[answer13[0]][answer13[1]][2]
                set_person['Перчатки'] = all[answer13[0]][answer13[1]][3]
                set_person['Стальной меч'] = all[answer13[0]][answer13[1]][4]
                set_person['Серебрянный меч'] = all[answer13[0]][answer13[1]][5]
                for i in range(6):
                    simple_backpack.append(all[answer13[0]][answer13[1]][i])
        if answer13[1] == 'lvl4':
            if coins < 1500:
                print('У тебя не хватате денег, чтобы купить у меня этот комплект')
                con2 = 'нет'
            print('Я создам полный комплект брони и мечей за 1500 монет')
            print('Будешь покупать?')
            answer14 = input('>?').strip()
            while answer14.lower() != 'да' and answer14.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer14 = input('>?').strip()
            if answer14.lower() == 'да':
                coins -= 1500
                set_person['lvl'] = answer13[1]
                set_person['Доспех'] = all[answer13[0]][answer13[1]][0]
                set_person['Штаны'] = all[answer13[0]][answer13[1]][1]
                set_person['Сапоги'] = all[answer13[0]][answer13[1]][2]
                set_person['Перчатки'] = all[answer13[0]][answer13[1]][3]
                set_person['Стальной меч'] = all[answer13[0]][answer13[1]][4]
                set_person['Серебрянный меч'] = all[answer13[0]][answer13[1]][5]
                for i in range(6):
                    forge_backpack.append(all[answer13[0]][answer13[1]][i])

        # возможный повторный запуск данной функции
        print('Нужно еще что-нибудь создать?')
        answer15 = input('>?').strip()
        while answer15.lower() != 'да' and answer15.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer15 = input('>?').strip()
        if answer15.lower() == 'да':
            print('Что надо выковать?(Пример ввода: Кота, lvl4)')
            answer13 = input('>?').strip().split(', ')
            while len(answer13) != 2:
                print('Некоректный ввод, попробуйте снова')
                answer13 = input('>?').strip().split(', ')
            while (answer13[0] != 'Волка' and answer13[0] != 'Грифона' and answer13[0] != 'Кота' and answer13[0] != 'Медведя' and answer13[0] != 'Феникса' \
                   and answer13[0] != 'Змеи') or (answer13[1] != 'lvl1' and answer13[1] != 'lvl2' and answer13[1] != 'lvl3' and answer13[1] != 'lvl4'):
                print('Некоректный ввод, попробуйте еще раз')
                answer13 = input('>?').strip().split(', ')
        else:
            print(f'Пока, {name.title()}')
            con2 = 'нет'
    return set_person, coins, forge_backpack
# функция травника
def lawn(name, coins, simple_backpack, price_list_lawn):
    print(f'Привет, {name.title()}')
    print('Какие припасы ты хочешь купить и сколько?(Пример ввода: Вербена, 9)')
    print('Есть: ', end='')
    for k, v in price_list_lawn.items():
        print(f'{k} стоит {v} монет')
    answer21 = input('>?').strip().split(', ')
    while len(answer21) != 2:
        print('Некоректный ввод, попробуйте снова')
        answer21 = input('>?').strip().split(', ')
    while (answer21 != 'Вербена' and answer21 != 'Яд главоглаза' and answer21 != 'Аренария' and answer21 != 'Призрачная пыль' and answer21 != 'Паутинник'
           and answer21 != 'Эмбрион эндриаги' and answer21 != 'Плод берберки' and answer21 != 'Костный мозг альгуля' and answer21 != 'Язык утопца'
    and answer21 != 'Ласточкина трава' and answer21 != 'Мозг утопца') and (answer21[1] not in '1234567890'):
        print('Некоректный ввод, попробуйте еще раз')
        answer21 = input('>?').strip().split(', ')
    con6 = 'да'
    while con6.lower() == 'да':
        for k, v in price_list_lawn.items():
            if answer21[0] == k:
                if coins < v * int(answer21[1]):
                    print('У тебя не хватате денег, чтобы купить у меня этот ингридиент')
                    con6 = 'нет'
                coins -= v * int(answer21[1])
                for i in range(int(answer21[1])):
                    simple_backpack.append(k)
                break
        # возможный повторный запуск данной функции
        print('Будешь еще что-то покупать?')
        answer24 = input('>?').strip()
        while answer24.lower() != 'да' and answer24.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer24 = input('>?').strip()
        if answer24.lower() == 'да':
            print('Какой ингридиент ты хочешь купить?(Пример ввода: Вербена, 9)')
            answer21 = input('>?').strip().split(', ')
            while len(answer21) != 2:
                print('Некоректный ввод, попробуйте снова')
                answer21 = input('>?').strip().split(', ')
            while (answer21 != 'Вербена' and answer21 != 'Яд главоглаза' and answer21 != 'Аренария' and answer21 != 'Призрачная пыль' and answer21 != 'Паутинник'
                   and answer21 != 'Эмбрион эндриаги' and answer21 != 'Плод берберки' and answer21 != 'Костный мозг альгуля' and answer21 != 'Язык утопца'
                   and answer21 != 'Ласточкина трава' and answer21 != 'Мозг утопца') and (answer21[1] not in '1234567890'):
                print('Некоректный ввод, попробуйте еще раз')
                answer21 = input('>?').strip().split(', ')
        else:
            print(f'Пока, {name.title()}')
            con6 = 'нет'
    return simple_backpack, coins
# функция купца
def trader(name, coins, simple_backpack, price_list_trader):
    print(f'Привет, {name.title()}')
    print('Какие припасы ты хочешь купить и сколько?(Пример ввода: Фосфор, 9)')
    print('Есть: ', end='')
    for k, v in price_list_trader.items():
        print(f'{k} стоит {v} монет')
    answer21 = input('>?').strip().split(', ')
    while (answer21 != 'Селитра' and answer21 != 'Фосфор' and answer21 != 'Корень душистого перца' \
                and answer21 != 'Красный кристалл' and answer21 != 'Белый кристалл') and (answer21[1] not in '1234567890'):
        print('Некоректный ввод, попробуйте еще раз')
        answer21 = input('>?').strip().split(', ')
    con6 = 'да'
    while con6.lower() == 'да':
        for k, v in price_list_trader.items():
            if answer21[0] == k:
                if coins < v * int(answer21[1]):
                    print('У тебя не хватате денег, чтобы купить у меня этот ингридиент')
                    con6 = 'нет'
                coins -= v * int(answer21[1])
                for i in range(int(answer21[1])):
                    simple_backpack.append(k)
                break

        # возможный повторный запуск данной функции
        print('Будешь еще что-то покупать?')
        answer24 = input('>?').strip()
        while answer24.lower() != 'да' and answer24.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer24 = input('>?').strip()
        if answer24.lower() == 'да':
            print('Какой ингридиент ты хочешь купить?')
            answer21 = input('>?').strip().split(', ')
            while (answer21 != 'Селитра' and answer21 != 'Фосфор' and answer21 != 'Корень душистого перца'
                   and answer21 != 'Красный кристалл' and answer21 != 'Белый кристалл') or answer21[1] not in '1234567890':
                print('Некоректный ввод, попробуйте еще раз')
                answer21 = input('>?').strip().split(', ')
        else:
            print(f'Пока, {name.title()}')
            con6 = 'нет'
    return simple_backpack, coins
# функция доски
def bulletin_board(order_list):
    accepted_order = ''
    for i in range(1, len(order_list)+1):
        print(f'{i}) {order_list[i-1]}')
    print('Напишите цифру заказа, который вы хотите взять')
    answer26 = int(input('>?').strip())
    while answer26 not in range(1, len(order_list)+1):
        print('Некоректный ввод, попробуйте еще раз')
        answer26 = int(input('>?').strip())
    accepted_order = order_list[answer26]
    return accepted_order
# функция таверны(корчмы)
def tavern(coins, simple_backpack, price_list_tavern):
    print('Что покупать будешь и сколько?(Пример ввода: Белая чайка, 9)')
    print('Есть: ', end='')
    products = []
    for k, v in price_list_tavern.items():
        print(f'{k} стоит {v} монет')
        products.append(k)
    answer27 = input('>?').strip().split(', ')
    while (answer27 != 'Алкагест' and answer27 != 'Белая чайка' and answer27 != 'Краснолюдский спирт') and (answer27[1] not in '1234567890'):
        print('Некоректный ввод, попробуйте еще раз')
        answer27 = input('>?').strip().split(', ')
    con6 = 'да'
    while con6.lower() == 'да':
        for k, v in price_list_tavern.items():
            if answer27[0] == k:
                if coins < v * int(answer27[1]):
                    print('У тебя не хватате денег, чтобы купить у меня этот ингридиент')
                    con6 = 'нет'
                coins -= v * int(answer27[1])
                for i in range(int(answer27[1])):
                    simple_backpack.append(k)
                break

        # возможный повторный запуск данной функции
        print('Будешь еще что-то покупать?')
        answer24 = input('>?').strip()
        while answer24.lower() != 'да' and answer24.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer24 = input('>?').strip()
        if answer24.lower() == 'да':
            print('Какую настойку/спирт ты хочешь купить?')
            answer27 = input('>?').strip().split(', ')
            while (answer27 != 'Алкагест' and answer27 != 'Белая чайка' and answer27 != 'Краснолюдский спирт') or (answer27[1] not in '1234567890'):
                print('Некоректный ввод, попробуйте еще раз')
                answer27 = input('>?').strip().split(', ')
        else:
            print(f'Пока, {name.title()}')
            con6 = 'нет'
    return simple_backpack, coins

# функция создания зелий и бомб
def craft(simple_backpack, for_craft, bombs, potions):
    print('Выберите, что будете создавать и какого уровня')
    for k, v in for_craft.items():
        print(k)
    answer29 = input('>?').strip().split(', ')
    while len(answer29) != 2:
        print('Некоректный ввод, попробуйте снова')
        answer29 = input('>?').strip().split(', ')
    while answer29[0] != 'Ласточка' and answer29[0] != 'Гром' and answer29[0] != 'Зелье Петри' and answer29[0] != 'Лес Марибора' \
            and answer29[0] != 'Неясыть' and answer29[0] != 'Картечь' and answer29[0] != 'Северный ветер' and answer29[0] != 'Сон дракона' \
            or (answer29[1] != 'lvl1' and answer29[1] != 'lvl2' and answer29[1] != 'lvl3'):
        print('Некоректный ввод, попробуйте еще раз')
        answer29 = input('>?').strip().split(', ')
    con7 = 'да'
    while con7.lower() == 'да':
        for k, v in for_craft.items():  # k - ласточка v - lvl1
            if k == answer29[0]:
                for k1, v1 in v.items():  # k1 - lvl1 v1 - {'Краснолюдский спирт': 1, 'Мозг утопца': 1, 'Ласточкина трава': 5}
                    if k1 == answer29[1]:
                        print('Чтобы создать этот предмет вам нужно:')
                        delete_lst = []
                        for k2, v2 in v[k1].items():  # k2 - 'Краснолюдский спирт', 'Мозг утопца', 'Ласточкина трава'  v2 - 1, 1, 5}
                            print(f'{k2} в количестве {v2} штук')
                            delete_lst.append(v2)
                        print()
                        print('Вы готовы потратить эти ресурсы?')
                        answer30 = input('>?').strip()
                        while answer30.lower() != 'да' and answer30.lower() != 'нет':
                            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                            answer30 = input('>?').strip()

                        if answer30.lower() == 'да':
                            if k in potions.keys():
                                for kp, vp in potions[k][k1].items():
                                    simple_backpack.append(kp)
                                for i in simple_backpack:
                                    for j in delete_lst:
                                        if i == j:
                                            simple_backpack.remove(i)
                            else:
                                for kb, vb in bombs[k][k1].items():
                                    if 'Эффективность' in choose_skills_list:
                                        if len(bombs_backpack) < 6 + skills_func_data(alchemy_skills, 'Эффективность'):
                                            bombs_backpack.append(kb)
                                        else:
                                            print('Вы не можете скрафтить еще бомб, потому что у вас полный рюкзак')
                                    else:
                                        if len(bombs_backpack) < 6:
                                            bombs_backpack.append(kb)
                                        else:
                                            print('Вы не можете скрафтить еще бомб, потому что у вас полный рюкзак')
                                if len(bombs_backpack) < 6 or len(bombs_backpack) < 6 + skills_func_data(alchemy_skills, 'Эффективность'):
                                    for i in simple_backpack:
                                        for j in delete_lst:
                                            if i == j:
                                                simple_backpack.remove(i)
                        print('Хотите еще что-нибудь создать?')
                        answer15 = input('>?').strip()
                        while answer15.lower() != 'да' and answer15.lower() != 'нет':
                            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                            answer15 = input('>?').strip()
                        if answer15.lower() == 'да':
                            print('Выберите, что будете создавать и какого уровня')
                            answer29 = input('>?').strip().split(', ')
                            while len(answer29) != 2:
                                print('Некоректный ввод, попробуйте снова')
                                answer29 = input('>?').strip().split(', ')
                            while answer29[0] != 'Ласточка' and answer29[0] != 'Гром' and answer29[
                                0] != 'Зелье Петри' and answer29[0] != 'Лес Марибора' \
                                    and answer29[0] != 'Неясыть' and answer29[0] != 'Картечь' and answer29[
                                0] != 'Северный ветер' and answer29[0] != 'Сон дракона' \
                                    or (answer29[1] != 'lvl1' and answer29[1] != 'lvl2' and answer29[1] != 'lvl3'):
                                print('Некоректный ввод, попробуйте еще раз')
                                answer29 = input('>?').strip().split(', ')
                        else:
                            print(f'Пока, {name.title()}')
                            con7 = 'нет'
    return simple_backpack

# функции для проверки выбранных умений и их значений
def skills_func_variable(input_data, use_data):               # возвращает переменную
    for k, v in input_data.items():
        for k1, v1 in v.items():
            if use_data == k1:
                out = v1
                break
    return out
def skills_func_data(input_data, use_data):                  # возвращает значение переменной
    for k, v in input_data.items():
        for k1, v1 in v.items():
            if use_data == k1:
                return(v1)

from random import randrange as rr
# функция вывода информации о время боя
def data_person(adrenalin_coobs, long_potions1, long_potions2, long_potions3, long_potions4, long_potions5, toxic, signs_energy, stamina, hp_person, alchemy_backpack, bombs_backpack):
    print(f'У вас {adrenalin_coobs} кубиков адреналина')
    print(f'У вас {toxic} очков интоксикации')
    print(f'У вас {signs_energy} энергии знаков')
    print(f'У вас {stamina} выносливости')
    print(f'У вас {hp_person} очков здоровья')
    print('В рюкзаке у вас осталось:')
    for i in alchemy_backpack:
        if i != alchemy_backpack[-1]:
            print(i, end=', ')
        else:
            print(i)
    for i in bombs_backpack:
        if i != bombs_backpack[-1]:
            print(i, end=', ')
        else:
            print(i)
    print()
    if long_potions1 >= 0:
        print(f'Ласточка будет действовать еще {long_potions1} ходов')
    if long_potions2 >= 0:
        print(f'Гром будет действовать еще {long_potions2} ходов')
    if long_potions3 >= 0:
        print(f'Зелье Петри будет действовать еще {long_potions3} ходов')
    if long_potions4 >= 0:
        print(f'Лес Марибора будет действовать еще {long_potions4} ходов')
    if long_potions5 >= 0:
        print(f'Неясыть будет действовать еще {long_potions4} ходов')

# карта для боя
def battle_arena(who, time, battle_map, xy_enemy=[], x=0, y=0):
    was = False
    if time == 1:
        xy_enemy = []
        for r in range(17):
            for c in range(17):
                if who == 'Волколак':
                    if (r == 8) and (c == 8):
                        battle_map[r][c] = '\U0001F43A'  # волколак
                        xy_enemy.append([r, c])
                    if (r == 15) and (c == 6):
                        battle_map[r][c] = '\U0001F464'  # перс
                        x_person, y_person = r, c
                    if (12 >= r >= 9 and 12 >= c >= 11) or (5 >= r >= 4 and 12 >= c >= 11) or (
                            7 >= r >= 4 and 4 >= c >= 3) or (12 >= r >= 11 and 10 >= c >= 6):
                        battle_map[r][c] = '\U0001FAA8'  # камень
                if who == 'Утопцы':
                    if (16 >= r >= 1) and (2 >= c >= 1):
                        battle_map[r][c] = '\U0001F30A'  # река
                    if (r == 8) and (c == 14):
                        battle_map[r][c] = '\U0001F464'  # перс
                        x_person, y_person = r, c
                    if was == False:
                        for i in range(12):
                            r1, c1 = rr(1, 17), rr(3, 8)
                            battle_map[r1][c1] = '\U0001F6AB'  # утопцы
                            xy_enemy.append([r, c])
                    was = True
                if who == 'Леший':
                    if (r == 8) and (c == 8):
                        battle_map[r][c] = '\U0001F332'  # леший сосна
                        xy_enemy.append([r, c])
                    if (r == 5) and (c == 14):  # перс
                        battle_map[r][c] = '\U0001F464'
                        x_person, y_person = r, c
                    if was == False:
                        for i in range(60):
                            battle_map[rr(1, 17)][rr(1, 17)] = '\U0001F333'  # лес
                    was = True
                if who == 'Накеры':  # накеры
                    if (r == 1 and 16 >= c >= 1):
                        battle_map[r][c] = '='  # дорога
                    if (r == 1) and (c == 15):  # перс
                        battle_map[r][c] = '\U0001F464'
                        x_person, y_person = r, c
                    if was == False:
                        xy_enemy = [[] for i in range(12)]
                        for i in range(50):
                            battle_map[rr(2, 17)][rr(1, 17)] = '\U0001F333'  # лес
                        for i in range(15):
                            r1, c1 = rr(2, 7), rr(2, 12)
                            battle_map[r1][c1] = '\U0001F6AB'  # накеры
                            xy_enemy.append([r1, c1])
                    was = True
                if who == 'Призрак':  # призрак
                    if (13 >= r >= 12 and c == 5) or (r == 11 and c == 9):
                        battle_map[r][c] = '\U0001F47B'  # призрак
                        xy_enemy.append([r, c])
                    if (11 >= r >= 10 and 5 >= c >= 4) or (13 == r and 7 >= c >= 6) or (11 >= r >= 9 and 8 >= c >= 7):
                        battle_map[r][c] = '\U0001F3E0'  # дома
                    if (12 >= r >= 1 and c == 6) or (12 == r and 16 >= c >= 6):
                        battle_map[r][c] = '='  # дорога
                    if (r == 5) and (c == 6):  # перс
                        battle_map[r][c] = '\U0001F464'
                        x_person, y_person  = r, c
                if battle_map[r][c] == '\U0001F6AB' and who == 'Накеры':
                    monsters_kolvo[who] += 1
                if who == 'Накеры':
                    monsters_hp['Накеры'] = [[50] for i in range(monsters_kolvo['Накеры'])]
                print(battle_map[r][c], end=' ')
            print()
        return monsters_kolvo, x_person, y_person, xy_enemy, battle_map
    else:
        monsters_kolvo[who] = 0
        for r in range(17):
            for c in range(17):
                if battle_map[int(x)][int(y)] == '\U0001F3E0' or battle_map[int(x)][int(y)] == '\U0001F30A' or battle_map[int(x)][int(y)] == '\U0001FAA8' \
                    or battle_map[int(x)][int(y)] == '\U0001F6AB' or battle_map[int(x)][int(y)] == '\U0001F47B' or battle_map[int(x)][int(y)] == '\U0001F332' \
                        or battle_map[int(x)][int(y)] == '\U0001F6AB' or battle_map[int(x)][int(y)] == '\U0001F43A':  # дома, река, камни, монстры == запретная зона
                    print('Вы не можете здесь находиться, напишите координату другой точки')
                    x, y = input().split(', ')
                if battle_map[r][c] =='\U0001F6AB' or battle_map[r][c] == '\U0001F47B' or battle_map[r][c] == '\U0001F332' \
                        or battle_map[r][c] == '\U0001F6AB' or battle_map[r][c] == '\U0001F43A':
                    if (abs(int(x) - r) in range(0, 4) and abs(int(y) - c) in range(0, 4)):
                        for k, v in emoji_monsters.items():  # монстры
                            if k == enemy:
                                battle_map[r][c] = ' '
                for i in xy_enemy:
                    if (abs(int(x) - i[0]) in range(0, 4) and abs(int(y) - i[1]) in range(0, 4)):
                        for k, v in emoji_monsters.items():  # монстры
                            if k == enemy:
                                battle_map[i[0]][i[1]] = v
                if battle_map[r][c] == '\U0001F464':         #   удаление предыдушего местоположения перса
                    battle_map[r][c] = ' '
                if battle_map[r][c] == '\U0001F6AB' or battle_map[r][c] == '\U0001F47B' or battle_map[r][c] == '\U0001F332' \
                        or battle_map[r][c] == '\U0001F6AB' or battle_map[r][c] == '\U0001F43A':            # считает монстры
                    monsters_kolvo[who] += 1

        for r in range(17):
            for c in range(17):
                if (r == x and c == y):  # перс
                    battle_map[x][y] = '\U0001F464'
                    x_person, y_person = r, c

                print(battle_map[r][c], end=' ')
            print()
        return monsters_kolvo, x_person, y_person, xy_enemy, battle_map

# надфункция(главная) боя
def fight(enemy, monsters_dmg, monsters_hp, monsters_kolvo, name, hp_person, schools, potions, bombs, choose_skills_list, oils):
    silver_fight_damage, steel_fight_damage, poison_damage, bleeding_damage, bombs_damage, signs_damage = damage(set_person, choose_skills_list, schools)
    all_armor = sum_armor(set_person, choose_skills_list, schools)
    adrenalin_coobs, for_coob = 0, 0
    arb_dmg = lvl_person
    if enemy == 'Волколак':
        print('Вы зашли в пещеру Волколака. Сейчас будет бой')
    else:
        print(f'Вы оказались около {enemy}. Сейчас будет бой')
    print('Вы можете атаковать мечом или использовать знаки/зелья/бомбы в свой ход')
    cont_close = 'да'
    signs_energy = 100
    time_to_kill = 0
    kven, irden = False, False
    aksii = False
    toxic, contusion, stamina, burning_damage = 0, 0, 100, 0
    long_potions1, long_potions2, long_potions3, long_potions4, long_potions5 = 0, 0, 0, 0, 0
    battle_map = [[' '] * 17 for _ in range(17)]
    if 'Закрепитель' in choose_skills_list:
        steel_fight_damage += 2 * skills_func_data(alchemy_skills, 'Ужас')
        silver_fight_damage += 2 * skills_func_data(alchemy_skills, 'Ужас')
    if 'Мутация тканей' in choose_skills_list:
        hp_person += int(len(choose_skills_list) / 4)
    if 'Приобретенная стойкость' in choose_skills_list:
        max_toxic = 100 + (skills_func_data(alchemy_skills, 'Приобретенная стойкость') * 20)
    else:
        max_toxic = 100
    if 'Лезвие бритвы' in choose_skills_list:
        adrenalin_coobs = 1
    monsters_kolvo, x_person_out, y_person_out, xy_enemy, battle_map = battle_arena(enemy, 1, battle_map)
    # ------------------------------------------------данные которые нужны для боя------------------------------------------------------------------------

    while cont_close.lower() == 'да':
        print('Вывести данные о персонаже?')
        answer35 = input('>?').strip()
        while answer35.lower() != 'да' and answer35.lower() != 'нет':
            print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
            answer35 = input('>?').strip()
        if answer35.lower() == 'да':
            data_person(adrenalin_coobs, long_potions1, long_potions2, long_potions3, long_potions4, long_potions5, toxic, signs_energy, stamina, hp_person, alchemy_backpack, bombs_backpack)
        if monsters_kolvo[enemy] == 0:
            print('Вы убили всех монстров')
            cont_close = 'нет'
        actions = 4
        print('Что использовать - Меч, Знаки, Зелья и Бомбы, Арбалет или Перемещение по карте?')
        answer32 = input('>?').strip()
        while answer32 != 'Меч' and answer32 != 'Знаки' and answer32 != 'Зелья и Бомбы' and answer32 != 'Арбалет' and answer32 != 'Перемещение по карте':
            print('Некоректный ввод, попробуйте еще раз')
            answer32 = input('>?').strip()
        # ------------------------------------------------обновление данных боя------------------------------------------------------------------------
        # ------------------------------------------------начало хода игрока------------------------------------------------------------------------
        while actions > 0:
            if 'Синергия' in choose_skills_list:
                all_dmg = int(len(choose_skills_list) / 4)
            else:
                all_dmg = 0
            all_enemy_f, all_enemy_b, all_enemy_s = 0, 0, 0
            for i in xy_enemy:
                all_enemy_f += 1
                if answer32 == 'Меч' and (abs(x_person_out - i[0]) in range(0, 3) and abs(y_person_out - i[1]) in range(0, 3)) \
                    and actions >= [2 if i == 'Кота' else 3 for i in set_person['Школа']][0]:
                    print('Быстрая атака или Мощная атака?')
                    attack = input('>?').strip()
                    while attack != 'Быстрая атака' and attack != 'Мощная атака':
                        print('Некоректный ввод, попробуйте еще раз')
                        attack = input('>?').strip()
                    yes_no = True
                    if 'Смертельная точность' in choose_skills_list and adrenalin_coobs >= 2:
                        if rr(101) <= rr(skills_func_variable(fight_skills, 'Смертельная точность')):
                            monsters_kolvo[enemy] -= 1
                            adrenalin_coobs -= 2
                            yes_no = False
                    if attack == 'Мощная атака' and yes_no == True:  # если игрок выбрал мощную атака
                        strong_damage = 0
                        if 'Силовая тренировка' in choose_skills_list:
                            strong_damage = skills_func_data(fight_skills, 'Силовая тренировка')
                            if 'Сокрушительные удары' in choose_skills_list or time_to_kill >= 3:  # если ему выпал крит
                                strong_damage += skills_func_variable(fight_skills, 'Сокрушительные удары')
                            strong_damage += skills_func_variable(fight_skills, 'Силовая тренировка')
                        if 'Разрыв' in choose_skills_list and adrenalin_coobs >= 1:
                            print('Вы будете использовать Разрыв?')
                            gap_ans = input('>?').strip()
                            while gap_ans.lower() != 'да' and gap_ans.lower() != 'нет':
                                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                                gap_ans = input('>?').strip()
                            if gap_ans.lower() == 'да':
                                gap_dmg = skills_func_data(fight_skills, 'Разрыв')
                                all_dmg = silver_fight_damage + strong_damage + gap_dmg
                                monsters_hp[enemy] -= all_dmg
                        else:
                            all_dmg += silver_fight_damage + strong_damage
                            monsters_hp[enemy] -= all_dmg
                    if attack == 'Быстрая атака' and yes_no == True:  # если игрок выбрал быструю атаку
                        fast_damage = 0
                        if 'Память тела' in choose_skills_list:
                            fast_damage = skills_func_data(fight_skills, 'Память тела')
                            if 'Точные удары' in choose_skills_list or time_to_kill >= 3:  # если ему выпал крит
                                fast_damage += skills_func_variable(fight_skills, 'Точные удары')
                            fast_damage += skills_func_variable(fight_skills, 'Память тела')
                        if 'Вихрь' in choose_skills_list and adrenalin_coobs >= 1:
                            print('Вы будете использовать Вихрь?')
                            vortex_ans = input('>?').strip()
                            while vortex_ans.lower() != 'да' and vortex_ans.lower() != 'нет':
                                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                                vortex_ans = input('>?').strip()
                            if vortex_ans.lower() == 'да':
                                vortex_dmg = skills_func_data(fight_skills, 'Вихрь')
                                all_dmg += silver_fight_damage + fast_damage + vortex_dmg
                                adrenalin_coobs -= 1
                                whose_dmg = []
                                t = 0
                                for i in xy_enemy:
                                    if (abs(x_person_out - i[0]) not in range(0, 3) and abs(y_person_out - i[1]) not in range(0, 3)):
                                        whose_dmg.append(t)
                                    t += 1
                                for j in monsters_hp[enemy]:
                                    for k in range(len(j)):
                                        if k in whose_dmg:
                                            j[k] -= all_dmg

                        else:
                            all_dmg += silver_fight_damage + fast_damage
                            monsters_hp[enemy] -= all_dmg
                    print(f'{name.title()} наносит урон мечом {all_dmg}')
                    if set_person['Школа'] == 'Змея':
                        poison_long, bleeding_long = int((all_dmg / 2)), int((all_dmg / 2))
                    print(f'У {enemy} осталось {monsters_hp[enemy]} здоровья')
                    if set_person['Школа'] == 'Кота':
                        actions -= 2
                        stamina -= 3
                    else:
                        actions -= 3
                        stamina -= 5
                elif answer32 == 'Меч' and (abs(x_person_out - i[0]) not in range(0, 3) and abs(y_person_out - i[1]) not in range(0, 3)) \
                        and all_enemy_f == monsters_kolvo[enemy]:
                    print('Вы не можете ударить мечом, потому что находитесь слишком далеко от врага')
                    print('Что использовать - Знаки, Зелья и Бомбы, Арбалет или Перемещение по карте?')
                    answer32 = input()
                    while answer32 != 'Знаки' and answer32 != 'Зелья и Бомбы' and answer32 != 'Арбалет' and answer32 != 'Перемещение по карте':
                        print('Некоректный ввод, попробуйте еще раз')
                        answer32 = input()
            if answer32 == 'Зелья и Бомбы' and actions >= 1:
                bombs_mean, potion_mean = False, False
                thing_to_use, what = use_bombs_or_potions(alchemy_backpack, bombs_backpack)
                # бомбы
                for i in xy_enemy:
                    all_enemy_b += 1
                    if what == 'Бомбы' and (abs(x_person_out - i[0]) in range(0, 3) and abs(y_person_out - i[1]) in range(0, 3)):
                        for k, v in bombs.items():  # k - картечь         v - lvl
                            for k1, v1 in v.items():  # k1 - lvl         v1 - картечь: 10
                                for k2, v2 in v1.items():  # k2 - картечь         v2 - 10
                                    if k2 == thing_to_use:
                                        if 'Взрывное дело' in choose_skills_list:
                                            v2 = v2 + (skills_func_data(alchemy_skills, 'Взрывное дело') * 3)
                                            monsters_hp[enemy] -= v2
                                        else:
                                            monsters_hp[enemy] -= v2
                                        print(f'Вы кидаете {thing_to_use} и чудовище получаен {v2} урона')
                                        if 'Кластерные бомбы' in choose_skills_list:
                                            long_bombs = skills_func_data(alchemy_skills, 'Кластерные бомбы')
                                        bombs_mean = True
                    elif all_enemy_b == monsters_kolvo[enemy]:
                        print('Вы не можете использовать бомбу, потому что рядом нету врага')
                        print('Использовать Зелье?')
                        answer34 = input('>?').strip()
                        if answer34.lower() == 'да':
                            thing_to_use, what = use_bombs_or_potions(alchemy_backpack, bombs_backpack)
                            what = 'Зелья'
                        else:
                            print('Что использовать - Меч, Знаки, Арбалет или Перемещение по карте?')
                            answer32 = input('>?').strip()
                            while answer32 != 'Меч' and answer32 != 'Знаки' and answer32 != 'Арбалет' and answer32 != 'Перемещение по карте':
                                print('Некоректный ввод, попробуйте еще раз')
                                answer32 = input('>?').strip()
                        break
                if what == 'Зелья':
                    print(f'Вы выпиваете {thing_to_use}')
                    for k, v in potions.items():  # k - ласточка         v - lvl
                        for k1, v1 in v.items():  # k - lvl         v - ласточка: 10
                            for k2, v2 in v1.items():  # k - ласточка         v - 10
                                if k2 == thing_to_use:
                                    if 'Ласточка' in k2:
                                        hp_person += v2
                                        long_potions1 = v + 1
                                        if 'Повышенная сопротивляемость' in choose_skills_list:
                                            toxic += int(v2 / skills_func_data(alchemy_skills, 'Повышенная сопротивляемость'))
                                        else:
                                            toxic += v2
                                        if 'Освежающий напиток' in choose_skills_list:
                                            hp_person += int(v2 * skills_func_data(alchemy_skills, 'Освежающий напиток'))
                                        if 'Побочные эффекты' in choose_skills_list:
                                            hp_person += v2
                                    if 'Гром' in k2:
                                        silver_fight_damage += v2
                                        steel_fight_damage += v2
                                        long_potions2 = v + 1
                                        if 'Повышенная сопротивляемость' in choose_skills_list:
                                            toxic += int(v2 / skills_func_data(alchemy_skills, 'Повышенная сопротивляемость'))
                                        else:
                                            toxic += v2
                                        if 'Освежающий напиток' in choose_skills_list:
                                            hp_person += int(v2 * skills_func_data(alchemy_skills, 'Освежающий напиток'))
                                        if 'Побочные эффекты' in choose_skills_list:
                                            silver_fight_damage += v2
                                            steel_fight_damage += v2
                                    if 'Зелье Петри' in k2:
                                        signs_damage += v2
                                        long_potions3 = v + 1
                                        if 'Повышенная сопротивляемость' in choose_skills_list:
                                            toxic += int(v2 / skills_func_data(alchemy_skills, 'Повышенная сопротивляемость'))
                                        else:
                                            toxic += v2
                                        if 'Освежающий напиток' in choose_skills_list:
                                            hp_person += int(
                                                v2 * skills_func_data(alchemy_skills, 'Освежающий напиток'))
                                        if 'Побочные эффекты' in choose_skills_list:
                                            signs_damage += v2
                                    if 'Лес Марибора' in k2:
                                        for_coob += v2
                                        long_potions4 = v + 1
                                        if 'Повышенная сопротивляемость' in choose_skills_list:
                                            toxic += int(
                                                v2 / skills_func_data(alchemy_skills, 'Повышенная сопротивляемость'))
                                        else:
                                            toxic += v2
                                        if 'Освежающий напиток' in choose_skills_list:
                                            hp_person += int(
                                                v2 * skills_func_data(alchemy_skills, 'Освежающий напиток'))
                                        if 'Побочные эффекты' in choose_skills_list:
                                            for_coob += v2
                                    if 'Неясыть' in k2:
                                        signs_energy += v2
                                        long_potions5 = v + 1
                                        if 'Повышенная сопротивляемость' in choose_skills_list:
                                            toxic += int(
                                                v2 / skills_func_data(alchemy_skills, 'Повышенная сопротивляемость'))
                                        else:
                                            toxic += v2
                                        if 'Освежающий напиток' in choose_skills_list:
                                            hp_person += int(
                                                v2 * skills_func_data(alchemy_skills, 'Освежающий напиток'))
                                        if 'Побочные эффекты' in choose_skills_list:
                                            signs_energy += v2
                                    potion_mean = True
                if bombs_mean == True:
                    if 'Верная рука' in choose_skills_list:
                        if set_person['Школа'] == 'Волка':
                            actions -= 0
                        else:
                            actions -= 0.5
                    else:
                        actions -= 1
                if potion_mean == True:
                    if set_person['Школа'] == 'Мантикора':
                        actions -= 0.5
                    else:
                        actions -= 1
            if answer32 == 'Знаки' and actions >= [1 if i == 'Грифона' else 2 for i in set_person['Школа']][0] \
                    and signs_energy >= [10 if i == 'Грифона' else 20 for i in set_person['Школа']][0]:
                can_minus = False
                print('Выберите какой Знак использовать')
                for k, v in signs_skills.items():
                    print(k)
                answer33 = input('>?').strip()
                while answer33 != 'Знак Ирден' and answer33 != 'Знак Квен' and answer33 != 'Знак Аксий' and answer33 != 'Знак Игни' and answer33 != 'Знак Аард':
                    print('Некоректный ввод, попробуйте еще раз')
                    answer33 = input('>?').strip()
                if answer33 == 'Знак Квен':
                    if kven == False:
                        print('Вы накладываете на себя Знак Квен')
                        kven = True
                        can_minus = True
                if answer33 == 'Знак Ирден':
                    if irden == False:
                        print('Вы применяете знак Ирден')
                        kven = True
                        can_minus = True
                        if 'Сила глифов' in choose_skills_list:
                            if 'Мощь Ирдена' in choose_skills_list:
                                irden_long = skills_func_data(signs_skills, 'Сила глифов') + 1 + skills_func_data(
                                    signs_skills, 'Мощь Ирдена')
                            else:
                                irden_long = skills_func_data(signs_skills, 'Сила глифов') + 1
                        else:
                            irden_long = 1
                        if 'Магическая ловушка' in choose_skills_list:
                            if 'Мощь Ирдена' in choose_skills_list:
                                irden_range = skills_func_data(signs_skills,
                                                               'Магическая ловушка') + 2 + skills_func_data(
                                    signs_skills, 'Мощь Ирдена')
                            else:
                                irden_range = skills_func_data(signs_skills, 'Магическая ловушка') + 2
                        else:
                            irden_range = 2
                if answer33 == 'Знак Аксий':
                    print('Вы задействовали знак Аксий')
                    if aksii == False:
                        aksii = True
                        can_minus = True
                    else:
                        print('Знак Аксий уже активирован')
                    if 'Обман' in choose_skills_list:
                        contusion = skills_func_data(signs_skills, 'Обман')
                if answer33 == 'Знак Игни':
                    if 'Расплавленный доспех' in choose_skills_list:
                        if 'Мощь Игни' in choose_skills_list:
                            burning_damage = skills_func_data(signs_skills, 'Расплавленный доспех') * 2 + skills_func_data(signs_skills, 'Мощь Игни')
                        else:
                            burning_damage = skills_func_data(signs_skills, 'Расплавленный доспех') * 2
                    if 'Огненный поток' in choose_skills_list:
                        monsters_hp[enemy] -= skills_func_data(signs_skills, 'Огненный поток') * 3
                        signs_energy -= 10
                    if 'Пироманьяк' in choose_skills_list:
                        if 'Мощь Игни' in choose_skills_list:
                            burning_long = skills_func_data(signs_skills, 'Пироманьяк') + skills_func_data(signs_skills, 'Мощь Игни')
                        else:
                            burning_long = skills_func_data(signs_skills, 'Пироманьяк')
                if answer33 == 'Знак Аард':
                    if 'Дальнобольный Аард' in choose_skills_list:
                        aard_range = skills_func_data(signs_skills, 'Дальнобольный Аард') + 3
                        for i in xy_enemy:
                            all_enemy_s += 1
                            if (abs(x_person_out - i[0]) in range(0, aard_range) and abs(y_person_out - i[1]) in range(0, aard_range)):
                                if 'Мощь Аарда' in choose_skills_list:
                                    long_action = skills_func_data(signs_skills, 'Мощь Аарда')
                                if 'Сметающий Аард' in choose_skills_list:
                                    contusion += (skills_func_data(signs_skills, 'Сметающий Аард') + skills_func_data(signs_skills, 'Мощь Аарда')) / 2
                                if 'Шоковая волна' in choose_skills_list:
                                    monsters_hp[enemy] -= (skills_func_data(signs_skills, 'Шоковая волна') + skills_func_data(signs_skills, 'Мощь Аарда')) * 5
                                can_minus = True
                            elif all_enemy_s == monsters_kolvo[enemy]:
                                print('В области действия знака Аард нету врагов')
                    else:
                        for i in xy_enemy:
                            all_enemy_s += 1
                            if (abs(x_person_out - i[0]) in range(0, 3) and abs(y_person_out - i[1]) in range(0, 3)):
                                if 'Мощь Аарда' in choose_skills_list:
                                    long_action = skills_func_data(signs_skills, 'Мощь Аарда')
                                if 'Сметающий Аард' in choose_skills_list:
                                    contusion += (skills_func_data(signs_skills, 'Сметающий Аард') + skills_func_data(
                                        signs_skills, 'Мощь Аарда')) / 2
                                if 'Шоковая волна' in choose_skills_list:
                                    monsters_hp[enemy] -= (skills_func_data(signs_skills,
                                                                            'Шоковая волна') + skills_func_data(
                                        signs_skills, 'Мощь Аарда')) * 5
                                can_minus = True
                            elif all_enemy_s == monsters_kolvo[enemy]:
                                print('В области действия знака Аард нету врагов')

                if can_minus == True:
                    if set_person['Школа'] == 'Грифона':
                        actions -= 1
                        signs_energy -= 10
                    else:
                        actions -= 2
                        signs_energy -= 20
            for i in xy_enemy:
                if answer32 == 'Арбалет' and (abs(x_person_out - i[0]) in range(0, 4) and abs(y_person_out - i[1]) in range(0, 4))\
                    and actions >= [0 if i == 'Молниеносные рефлексы' else 0.5 for i in choose_skills_list][0]:
                    if 'Знание анатомии' in choose_skills_list:
                        if rr(101) <= rr(skills_func_data(fight_skills, 'Знание анатомии')):
                            arb_dmg += 1
                    if 'Сковывающий выстрел' in choose_skills_list:
                        enemy_move = False
                    if 'Отражение стрел' in choose_skills_list:
                        enemy_ard_dmg = 0
                    else:
                        hp_person -= enemy_ard_dmg
                    if 'Молниеносные рефлексы' in choose_skills_list:
                        actions -= 0
                    else:
                        actions -= 0.5
            if answer32 == 'Перемещение по карте' and actions >= 1 and stamina >= 10:
                print(f'Напишите координату(x, y) куда вы хотите переместится на карте. Нынешние координаты {x_person_out} {y_person_out}')
                teleport = input('>?').strip().split(', ')
                while int(teleport[0]) not in range(1, 17) or int(teleport[1]) not in range(1, 17):
                    print('Некоректный ввод, попробуйте еще раз')
                    teleport = input('>?').strip().split(', ')
                if schools == 'Кота':
                    while abs(x_person_out - int(teleport[0])) not in range(0, 7) or abs(y_person_out - int(teleport[1])) not in range(0, 7):
                        print('Вы не можете походить так далеко')
                        teleport = input('>?').strip().split(', ')
                else:
                    while abs(x_person_out - int(teleport[0])) not in range(0, 5) or abs(y_person_out - int(teleport[1])) not in range(0, 5):
                        print('Вы не можете походить так далеко')
                        teleport = input('>?').strip().split(', ')
                if set_person['Школа'] == 'Кота':
                    actions -= 0.5
                    stamina -= (abs(x_person_out - int(teleport[0])) + abs(y_person_out - int(teleport[1]))) / 2
                else:
                    actions -= 1
                    stamina -= (abs(x_person_out - int(teleport[0])) + abs(y_person_out - int(teleport[1])))
                monsters_kolvo, x_person_out, y_person_out, xy_enemy, battle_map = battle_arena(enemy, 2, battle_map, xy_enemy, int(teleport[0]), int(teleport[1]))
            elif answer32 == 'Перемещение по карте' and (actions < 1 or stamina < 10):
                print('Вы не можете переместиться по карте, потому что у вас закончилась выносливость')
                print('Что использовать - Знаки, Зелья и Бомбы, Арбалет или Перемещение по карте?')
                answer32 = input('>?').strip()
                while answer32 != 'Меч' and answer32 != 'Знаки' and answer32 != 'Зелья и Бомбы' and answer32 != 'Арбалет':
                    print('Некоректный ввод, попробуйте еще раз')
                    answer32 = input('>?').strip()

            if actions > 0:
                if monsters_kolvo[enemy] == 0:
                    print('Вы убили всех монстров')
                    cont_close = 'нет'
                print(f'У вас еще осталось {actions} очков хода')
                if actions <= 2:
                    print('Если вы хотите, вы можете завершить ход, для этого напишите "Завершить ход"')
                print('Или можете использовать - Меч, Знаки, Зелья и Бомбы, Арбалет и Перемещение по карте')
                answer32 = input('>?').strip()
                while answer32 != 'Меч' and answer32 != 'Знаки' and answer32 != 'Зелья и Бомбы' and answer32 != 'Арбалет' and answer32 != 'Перемещение по карте' \
                        and answer32 != 'Завершить ход':
                    print('Некоректный ввод, попробуйте еще раз')
                    answer32 = input('>?').strip()
                if answer32 == 'Завершить ход':
                    actions = 0
                if 'Убийственный кураж' in choose_skills_list:
                    for k, v in monsters_kolvo.items():
                        if k == enemy and (enemy == 'Утопцы' or enemy == 'Накеры'):
                            time_to_kill += 1

        # ------------------------------------------------конец хода игрока------------------------------------------------------------------------
        monster_move = False
        how_many = 0
        for i in xy_enemy:              # перемещение монстров
            if (abs(x_person_out - i[0]) in range(0, 4) and abs(y_person_out - i[1]) in range(0, 4)):
                monster_move = True
                print('Вас заметил монстр')
                i[0], i[1] = x_person_out - 1, y_person_out - 1
                how_many += 1
        if monster_move == True:
            monsters_kolvo, x_person_out, y_person_out, xy_enemy, battle_map = battle_arena(enemy, 2, battle_map, xy_enemy, int(teleport[0]), int(teleport[1]))
            print(xy_enemy)
        kven_long = 2
        if 'Мощь Квена' in choose_skills_list:
            kven_long += skills_func_data(signs_skills, 'Мощь Квена')
        # действия квена и ирдена
        if kven == True:
            for i in range(kven_long):
                if 'Активный щит' in choose_skills_list:
                    hp_person += skills_func_data(signs_skills, 'Активный щит') * 2
                if 'Разряд Квена' in choose_skills_list:
                    monsters_hp[enemy] -= skills_func_data(signs_skills, 'Разряд Квена') * 2
                if 'Взрывной щит' in choose_skills_list:
                    contusion = skills_func_data(signs_skills, 'Взрывной щит')
        if irden == True:
            for i in range(irden_long):
                for i in xy_enemy:
                    if (abs(x_person_out - i[0]) in range(1, irden_range) and abs(y_person_out - i[1]) in range(1, irden_range)):
                        if 'Заряженные глифы' in choose_skills_list:
                            irden_dmg = ((skills_func_data(signs_skills, 'Сила глифов') + (
                                skills_func_data(signs_skills, 'Магическая ловушка')))) / 2
                            irden_dmg += skills_func_data(signs_skills, 'Заряженные глифы')
                        else:
                            irden_dmg = ((skills_func_data(signs_skills, 'Сила глифов') + (
                                skills_func_data(signs_skills, 'Магическая ловушка')))) / 2
                        monsters_hp[enemy] -= irden_dmg
                    else:
                        print('В области действия знака Ирден нету врагов')
        if aksii == True:
            if 'Контроль' in choose_skills_list:
                hp_person += skills_func_data(signs_skills, 'Контроль')
            if 'Мощь Аксия' in choose_skills_list:
                monsters_hp[enemy] -= skills_func_data(signs_skills, 'Мощь Аксия')
            if 'Марионетка' in choose_skills_list:
                if 'Мощь Аксия' in choose_skills_list:
                    for i in range(skills_func_data(signs_skills, 'Марионетка') + skills_func_data(signs_skills, 'Мощь Аксия')):
                        if 'Контроль' in choose_skills_list:
                            all_dmg += monsters_dmg[enemy] + skills_func_data(signs_skills, 'Контроль')
                        else:
                            all_dmg += monsters_dmg[enemy]
                else:
                    for i in range(skills_func_data(signs_skills, 'Марионетка')):
                        if 'Контроль' in choose_skills_list:
                            all_dmg += monsters_dmg[enemy] + skills_func_data(signs_skills, 'Контроль')
                        else:
                            all_dmg += monsters_dmg[enemy]
        if 'Река гнева' in choose_skills_list and adrenalin_coobs >= 1:
            print(f'1 кубик адреналина восстанавливает 30 энергии знаков. Сейчас у вас {adrenalin_coobs} кубика адреналина и {signs_energy} энергии знаков')
            print('Хотите восстановать энергию знаков за счет кубиков адреналина')
            answer36 = input()
            while answer36.lower() != 'да' and answer36.lower() != 'нет':
                print('Извините, но я слишком тупая программа, я могу понимать ответы только "да" и "нет"')
                answer36 = input()
            if answer36.lower() == 'да':
                print('Сколько кубиков адреналина вы хотите потратить?')
                answer37 = int(input())
                signs_energy += 30 * answer37
                adrenalin_coobs -= answer37
                print('Сейчас у вас {adrenalin_coobs} кубика адреналина и {signs_energy} энергии знаков')
        if set_person['Школа'] == 'Феникса':
            if 'Ускоренное восстоновление' in choose_skills_list:
                toxic -= 4 + skills_func_data(alchemy_skills, 'Ускоренное восстоновление')
            if 'Быстрый метоболизм' in choose_skills_list:
                toxic -= 8 + skills_func_data(alchemy_skills, 'Быстрый метоболизм')
            else:
                toxic -= 4
        else:
            toxic -= 2
        if 'Презрение к боли' in choose_skills_list:
            hp_person += toxic * skills_func_data(alchemy_skills, 'Презрение к боли')
        if 'Отравленные клинки' in choose_skills_list:
            if set_person['Школа'] == 'Змеи':
                poison_damage += skills_func_data(alchemy_skills, 'Отравленные клинки')
            else:
                poison_damage = skills_func_data(alchemy_skills, 'Отравленные клинки')
        if toxic > max_toxic:
            if 'Адаптация' in choose_skills_list:
                hp_person += (toxic - 100) + skills_func_data(alchemy_skills, 'Адаптация')
            else:
                hp_person -= (toxic - 100) * 2
            if 'Охотничий инстинкт' in choose_skills_list:
                all_dmg *= (skills_func_data(alchemy_skills, 'Охотничий инстинкт') * 1.1)
        # пасивный урон
        if poison_damage > 0:
            for i in range(poison_long):
                monsters_hp[enemy] -= poison_damage
                print(f'{name.title()} получает урон от отравления {poison_damage}')
        if bleeding_damage > 0:
            for i in range(bleeding_long):
                monsters_hp[enemy] -= bleeding_long
                print(f'{name.title()} получает урон от кровотечения {bleeding_long}')
        if burning_damage > 0:
            for i in range(burning_long):
                monsters_hp[enemy] -= burning_damage
                print(f'{name.title()} получает урон от возгорания {burning_damage}')

        # ------------------------------------------------рабоат пасивок + обновление карты со сторона мобов------------------------------------------------------------------------
        adr = False
        kven1 = 0
        if monsters_kolvo[enemy] == 0:
            print('Вы убили всех монстров')
            cont_close = 'нет'
        for i in xy_enemy:
            if (abs(int(x_person_out) - int(i[0])) in range(0, 2) and abs(int(y_person_out) - int(i[1])) in range(0, 2)) and (contusion == 0 or (enemy == 'Леший' or 'Волколак')):
                adr = True
                if kven == False:
                    if 'Решительность' in choose_skills_list:
                        if set_person['Школа'] == 'Медведя':
                            for_coob -= 5 - skills_func_data(fight_skills, 'Решительность')
                        else:
                            for_coob -= 10 - skills_func_data(fight_skills, 'Решительность')
                    else:
                        if set_person['Школа'] == 'Медведя':
                            for_coob -= 10
                        else:
                            for_coob -= 20
                else:
                    kven1 = 1
                if 'Легкость ног' in choose_skills_list or 'Ясность мысли' in choose_skills_list:
                    if 'Контратака' in choose_skills_list and 'Легкость ног' in choose_skills_list:
                        monsters_hp -= all_dmg * skills_func_data(fight_skills, 'Контратака')
                        if kven == False:
                            if 'Хлипкое оружие' in choose_skills_list:
                                input_dmg = monsters_dmg[enemy] - skills_func_data(fight_skills, 'Контратака') - skills_func_data(fight_skills, 'Хлипкое оружие')
                                if input_dmg * how_many - (all_armor / 2) > 0:
                                    hp_person -= input_dmg * how_many - (all_armor / 2)
                                    print(f'{enemy} наносит {input_dmg * how_many - (all_armor / 2)} урона')
                            else:
                                input_dmg = monsters_dmg[enemy] - skills_func_data(fight_skills, 'Контратака')
                                if input_dmg * how_many - (all_armor / 2) > 0:
                                    hp_person -= input_dmg * how_many - (all_armor / 2)
                                    print(f'{enemy} наносит {input_dmg * how_many - (all_armor / 2)} урона')
                        else:
                            kven1 = 1

                    else:
                        if rr(101) <= skills_func_data(fight_skills, 'Ясность мысли'):
                            print('Вы увернусь от атаки противника')
                        else:
                            monsters_hp -= all_dmg
                            if kven == False:
                                if 'Хлипкое оружие' in choose_skills_list:
                                    input_dmg = monsters_dmg[enemy] - skills_func_data(fight_skills, 'Хлипкое оружие')
                                    if input_dmg * how_many - (all_armor / 2) > 0:
                                        hp_person -= input_dmg * how_many - (all_armor / 2)
                                        print(f'{enemy} наносит {input_dmg * how_many - (all_armor / 2)} урона')
                                else:
                                    input_dmg = monsters_dmg[enemy]
                                    if input_dmg * how_many - (all_armor / 2) > 0:
                                        hp_person -= input_dmg * how_many - (all_armor / 2)
                                        print(f'{enemy} наносит {input_dmg * how_many - (all_armor / 2)} урона')
                            else:
                                kven1 = 1
                else:
                    if kven == False:
                        if 'Хлипкое оружие' in choose_skills_list:
                            input_dmg = monsters_dmg[enemy] - skills_func_data(fight_skills, 'Хлипкое оружие')
                            if input_dmg * how_many - (all_armor / 2) > 0:
                                hp_person -= input_dmg * how_many - (all_armor / 2)
                                print(f'{enemy} наносит {input_dmg * how_many - (all_armor / 2)} урона')
                        else:
                            input_dmg = monsters_dmg[enemy]
                            if input_dmg * how_many - (all_armor / 2) > 0:
                                hp_person -= input_dmg * how_many - (all_armor / 2)
                                print(f'{enemy} наносит {input_dmg * how_many - (all_armor / 2)} урона')
                    else:
                        kven1 = 1
                if kven1 == 1:
                    kven = False
                if 'Бессмертие' in choose_skills_list and hp_person == 0 and adrenalin_coobs > 0:
                    if adrenalin_coobs == 1:
                        hp_person = hp_person / 3
                    if adrenalin_coobs == 2:
                        hp_person = hp_person / 2
                    if adrenalin_coobs == 3:
                        hp_person = hp_person / 1
                elif hp_person == 0:
                    print('Вы умерли')
                    cont_close = 'нет'
                    break
        if monsters_kolvo[enemy] == 0:
            print('Вы убили всех монстров')
            cont_close = 'нет'
        if adr == False:
            adrenalin_coobs, for_coob = adrenalin(adrenalin_coobs, for_coob, set_person, choose_skills_list, all_dmg)
        else:
            adrenalin_coobs, for_coob = adrenalin(adrenalin_coobs, for_coob, set_person, choose_skills_list, all_dmg, input_dmg)
        monsters_kolvo, x_person_out, y_person_out, xy_enemy, battle_map = battle_arena(enemy, 2, battle_map, xy_enemy, x_person_out, y_person_out)

# подфункции, которые считают данные/выполняют какие то действия в бою
def adrenalin(adrenalin_coobs, for_coob, set_person, choose_skills_list, all_dmg, input_dmg=0 ):         # адреналин накапливается от количества нанесеног урона и падает от полученого
    # адреналин можно перекачивать в урон, урон знаков, хп
    if set_person['Школа'] == 'Медведя':
        for_coob += (all_dmg * 1.5)
    else:
        for_coob += all_dmg
    if set_person['Школа'] == 'Медведя':
        if all_dmg <= 2:
            for_coob -= 5
    else:
        if all_dmg <= 2:
            for_coob -= 8
    if set_person['Школа'] == 'Медведя':
        if input_dmg >= 15:
            for_coob -= 5
    else:
        if input_dmg >= 10:
            for_coob -= 8
    if set_person['Школа'] == 'Медведя':
        if for_coob >= 35 and adrenalin_coobs < 3:
            adrenalin_coobs += 1
            for_coob = 0
    else:
        if for_coob >= 50 and adrenalin_coobs < 3:
            adrenalin_coobs += 1
            for_coob = 0
    return adrenalin_coobs, for_coob
def use_bombs_or_potions(alchemy_backpack, bombs_backpack):
    print('Выберите что использовать')
    for i in alchemy_backpack:
        if i != alchemy_backpack[-1]:
            print(i, end=', ')
        else:
            print(i)

    for i in bombs_backpack:
        if i != bombs_backpack[-1]:
            print(i, end=', ')
        else:
            print(i)
    answer31 = input('>?').strip()
    while answer31 not in bombs_backpack and answer31 not in alchemy_backpack:
        print('У вас нет этого предмета, выберите из имеющихся')
        answer31 = input('>?').strip()
    if answer31 in alchemy_backpack:
        what = 'Зелья'
    if answer31 in bombs_backpack:
        what = 'Бомбы'
    return answer31, what
def damage(set_person, choose_skills_list, schools):
    silver_fight_damage, steel_fight_damage, signs_damage = 0, 0, 0
    poison_damage, bleeding_damage = 0, 0
    bombs_damage = 0
    lvl_bonus_dmg = int(lvl_person)
    for k, v in set_person.items():
        if k == 'lvl':
            lvl = v
        if k == 'Школа':
            for i in range(len(schools)):
                if schools[i] == v:
                    ii = schools[i]
        if k == 'Серебрянный меч':
            lst11, lst22 = [], []
            for k1, v1 in silver_swords_down[lvl].items():
                lst11.append(k1)
                lst22.append(v1)
            for i in range(len(lst11)):
                if ii in lst11[i]:
                    silver_fight_damage = lst22[i]
                    break
        if k == 'Стальной меч':
            lst1, lst2 = [], []
            for k1, v1 in steel_swords_down[lvl].items():
                lst1.append(k1)
                lst2.append(v1)
            for i in range(len(lst1)):
                if ii in lst1[i]:
                    steel_fight_damage = lst2[i]
                    break
    if set_person['Школа'] == 'Кота':
        silver_fight_damage, steel_fight_damage = silver_fight_damage + lvl_bonus_dmg, steel_fight_damage + lvl_bonus_dmg
    if set_person['Школа'] == 'Змеи':
        poison_damage, bleeding_damage = 1 + lvl_bonus_dmg, 1 + lvl_bonus_dmg
    if set_person['Школа'] == 'Волка':
        bombs_damage = 1 + (lvl_bonus_dmg * 1.5)
    if set_person['Школа'] == 'Грифона':
        signs_damage = 1 + (lvl_bonus_dmg * 1.5)
    return silver_fight_damage, steel_fight_damage, poison_damage, bleeding_damage, bombs_damage, signs_damage
def sum_armor(set_person, choose_skills_list, schools):
    all_armor = 0
    down = []
    lvl_bonus_armor = lvl_person

    for k, v in set_person.items():
        if k == 'lvl':
            lvl = v
        if k == 'Школа':
            for i in range(len(schools)):
                if schools[i] == v:
                    ii = schools[i]
        if k == 'Доспех':
            down.append(armor_down)
        if k == 'Штаны':
            down.append(pants_down)
        if k == 'Сапоги':
            down.append(boots_down)
        if k == 'Перчатки':
            down.append(gloves_down)
        for j in down:
            lst1, lst2 = [], []
            for k1, v1 in j[lvl].items():
                lst1.append(k1)
                lst2.append(v1)
            for i in range(len(lst1)):
                if ii in lst1[i]:
                    all_armor += lst2[i]


    if set_person['Школа'] == 'Медведя':
        all_armor, get_adrenalin = all_armor + (lvl_bonus_armor * 3)
    return all_armor

# функция опыта
def exp(expa, monsters_kolvo, monsters_exp, lvl_person, points_skills):
    for k, v in monsters_kolvo.items():
        if v == 0:
            for k1, v1 in monsters_exp.items():
                if k1 == k:
                    expa += v1
                    monsters_exp[k1] = 0
                    del monsters_exp[k1]
                    break
    while expa >= 100:
        lvl_person += 1
        points_skills += 1
        expa -= 100
    return expa, lvl_person, points_skills

# стартовая функция
def create_hero():
    print()
    print('Прежде всего вам нужно выбрать школу(фракцию), у разных школ разные бонусы, также под разные школы больше или меньше подходят разные умения')
    print('Всего 6 школ: Волк, Грифон, Кот, Змея, Медведь и Феникс')
    print('Школу можно менять раз в 10 ходов, так что выбирайте с умом')
    print('------------------------------------------------------------')
    describe_schools()
    print('------------------------------------------------------------')
    print('В начале игры вам дается 5 очков умений, с помощью которых вы можете прокачать различные умения')
    print('Есть 3 ветки умений: Фехтование, Знаки(магия) и Алхимия')
    print('В каждой ветке кроме обычных умений, есть базовые умения персонажа, их прокачивать нельзя')
    print('Всего у вашего героя может быть 16 умений')
    print('Также у каждого умения есть уровни, тем выше уровень, тем сильнее умение')
    print('Походу прокачки персонажа, у вашего героя будут появлятся различные способности и умения')
    print('Также в игре важную роль играют зелья и бомбы, они бывают 3ех уровней')
    print('В начале игры помимо снарежения у вас есть 500 оренов, Ласточка, Гром и Картечь')
    print('По ходу игры вы сможете сами создавать зелья и бомбы, а не достающие ресурсы покупать в корчме или у травника')
    print('----------------------------------------------------------------------------------')
    print('Теперь приступим к распределению стартовых очков умений')
    change_skills(points_skills)
    print('----------------------------------------------------------------------------------')
    print()
    x1, y1 = 21, 28
    print('Теперь взгляним на карту')
    print_map(create_map(x1, y1, coins))


set_person = {'lvl': 'lvl1', 'Школа': [], 'Доспех': [], 'Штаны': [], 'Сапоги': [], 'Перчатки': [], 'Стальной меч': [], 'Серебрянный меч': [], 'Арбалет': []}
points_skills = 5
enemy = ''
expa = 0
lvl_person = 1
choose_skills_list = []
simple_backpack, alchemy_backpack, bombs_backpack, forge_backpack = [], ['Гром', 'Отличная ласточка'], ['Картечь'], []
schools = ['Кота', 'Волка', 'Грифона', 'Феникса', 'Медведя', 'Змеи']
coins = 50000
hp_person = 100

order_list = ['Ищу воина способного убить монстров, которые контролируют правую сторону вверхнего моста. Заплачу 200 монет',
              'В лесу завелось чудище, стали пропадать люди, тела некоторых находят в лесу к западу от деревни. Человеку, который принес голову этого чудовища, заплачу сколько потребуется',
              'Нужен ведьмак, чтобв избавиться от призрака, который завелся в старом поместье. Заплачу 350 монет',
              'Какие-то упыри-полурослики на дороге не дают мне уехать на запад. Дам 200 монет, тому кто их убьет',
              'Клянусь богом, я видел как в лесу ходило дерево. Оно было живое!!! Заплачу тому, кто избавит лес от этой напасти']

print('Здравствуйте! Это игра, я бот Владимир и моя задача помочь вам разобраться в этой игре')
print('Вам нужно будет создать персонажа, которым вы будете ходить по карте и убивать монстров')
name = input('Сперва, тебе стоит представиться. Всё-таки нам предстоит провести вместе время, мне стоит знать, как тебя зовут :)\n>?')
print('Рад знакомству', name.title())
create_hero()
movement_person(map)


